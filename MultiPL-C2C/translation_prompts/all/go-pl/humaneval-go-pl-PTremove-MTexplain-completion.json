[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "pl",
    "prompt": "sub correct_bracketing {\n    my($brackets) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"()\"),1) || $candidate->(\"()\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()())\"),1) || $candidate->(\"(()())\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())()\"),1) || $candidate->(\"()()(()())()\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()((()()())())(()()(()))\"),1) || $candidate->(\"()()((()()())())(()()(()))\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"((()())))\"),\"\") || $candidate->(\"((()())))\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\")(()\"),\"\") || $candidate->(\")(()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(\"),\"\") || $candidate->(\"(\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"((((\"),\"\") || $candidate->(\"((((\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\")\"),\"\") || $candidate->(\")\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()\"),\"\") || $candidate->(\"(()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())())(()\"),\"\") || $candidate->(\"()()(()())())(()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"()()(()())()))()\"),\"\") || $candidate->(\"()()(()())()))()\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc correct_bracketing(brackets string) bool {\n\tdepth := 0\n\tfor _, b := range brackets {\n\t\tif b == '(' {\n\t\t\tdepth += 1\n\t\t} else {\n\t\t\tdepth -= 1\n\t\t}\n\t\tif depth < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn depth == 0\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub correct_bracketing {\n    my($brackets) = @_;\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "pl",
    "prompt": "sub triangle_area {\n    my($a, $h) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n        if(eq_deeply($candidate->(5, 3),7.5) || $candidate->(5, 3)==7.5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2),2.0) || $candidate->(2, 2)==2.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 8),40.0) || $candidate->(10, 8)==40.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc triangle_area(a int, h int) float64 {\n    return float64(a*h)/2.0\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub triangle_area {\n    my($a, $h) = @_;\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "pl",
    "prompt": "sub special_factorial {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288) || $candidate->(4)==288) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560) || $candidate->(5)==34560) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000) || $candidate->(7)==125411328000) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc special_factorial(n int) int {\n    fact_i := 1\n    special_fact := 1\n    for i := 1; i <= n; i++ {\n        fact_i *= i\n        special_fact *= fact_i\n    }\n    return special_fact\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub special_factorial {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "pl",
    "prompt": "sub largest_smallest_integers {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_smallest_integers;\n        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7]),[undef, 1]) || $candidate->([2, 4, 1, 3, 5, 7])==[undef, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7, 0]),[undef, 1]) || $candidate->([2, 4, 1, 3, 5, 7, 0])==[undef, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, -2]),[-2, 1]) || $candidate->([1, 3, 2, 4, 5, 6, -2])==[-2, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 3, 6, 2, 7, -7]),[-7, 2]) || $candidate->([4, 5, 3, 6, 2, 7, -7])==[-7, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]) || $candidate->([7, 3, 8, 4, 9, 2, 5, -9])==[-9, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[undef, undef]) || $candidate->([])==[undef, undef]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0]),[undef, undef]) || $candidate->([0])==[undef, undef]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6]),[-1, undef]) || $candidate->([-1, -3, -5, -6])==[-1, undef]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6, 0]),[-1, undef]) || $candidate->([-1, -3, -5, -6, 0])==[-1, undef]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, 1]),[-3, 1]) || $candidate->([-6, -4, -4, -3, 1])==[-3, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, -100, 1]),[-3, 1]) || $candidate->([-6, -4, -4, -3, -100, 1])==[-3, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage largest_smallest_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc largest_smallest_integers(lst []int) []interface{} {\n\tsmallest := make([]int, 0)\n\tlargest := make([]int, 0)\n\n\tfor _, i := range lst {\n\t\tif i < 0 {\n\t\t\tsmallest = append(smallest, i)\n\t\t} else if i > 0 {\n\t\t\tlargest = append(largest, i)\n\t\t}\n\t}\n\n\tvar smallestVal interface{}\n\tif len(smallest) > 0 {\n\t\tsmallestVal = smallest[0]\n\t\tfor _, i := range smallest {\n\t\t\tif i > smallestVal.(int) {\n\t\t\t\tsmallestVal = i\n\t\t\t}\n\t\t}\n\t} else {\n\t\tsmallestVal = nil\n\t}\n\n\tvar largestVal interface{}\n\tif len(largest) > 0 {\n\t\tlargestVal = largest[0]\n\t\tfor _, i := range largest {\n\t\t\tif i < largestVal.(int) {\n\t\t\t\tlargestVal = i\n\t\t\t}\n\t\t}\n\t} else {\n\t\tlargestVal = nil\n\t}\n\n\treturn []interface{}{smallestVal, largestVal}\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub largest_smallest_integers {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "pl",
    "prompt": "sub digits {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5) || $candidate->(5)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5) || $candidate->(54)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1) || $candidate->(120)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5) || $candidate->(5014)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315) || $candidate->(98765)==315) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625) || $candidate->(5576543)==2625) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0) || $candidate->(2468)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc digits(n int) int {\n\tproduct := 1\n\toddCount := 0\n\n\tfor _, digit := range fmt.Sprintf(\"%d\", n) {\n\t\tintDigit := int(digit - '0')\n\t\tif intDigit%2 == 1 {\n\t\t\tproduct *= intDigit\n\t\t\toddCount += 1\n\t\t}\n\t}\n\n\tif oddCount == 0 {\n\t\treturn 0\n\t} else {\n\t\treturn product\n\t}\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub digits {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "pl",
    "prompt": "sub fib4 {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4) || $candidate->(5)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28) || $candidate->(8)==28) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104) || $candidate->(10)==104) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386) || $candidate->(12)==386) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage fib4_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc fib4(n int) int {\n    results := []int{0, 0, 2, 0}\n    if n < 4 {\n        return results[n]\n    }\n\n    for i := 4; i <= n; i++ {\n        sum := results[0] + results[1] + results[2] + results[3]\n        results = append(results, sum)\n        results = results[1:]\n    }\n\n    return results[3]\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub fib4 {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "pl",
    "prompt": "sub is_happy {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\") || $candidate->(\"a\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aa\"),\"\") || $candidate->(\"aa\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1) || $candidate->(\"abcd\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\") || $candidate->(\"aabb\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"adb\"),1) || $candidate->(\"adb\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\") || $candidate->(\"xyy\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1) || $candidate->(\"iopaxpoi\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxioi\"),\"\") || $candidate->(\"iopaxioi\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_happy {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "pl",
    "prompt": "sub max_fill {\n    my($grid, $capacity) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_fill;\n        if(eq_deeply($candidate->([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6) || $candidate->([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5) || $candidate->([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0, 0, 0], [0, 0, 0]], 5),0) || $candidate->([[0, 0, 0], [0, 0, 0]], 5)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4) || $candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 2)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2) || $candidate->([[1, 1, 1, 1], [1, 1, 1, 1]], 9)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc max_fill(grid [][]int, capacity int) int {\n    sum := 0\n    for _, arr := range grid {\n        s := 0\n        for _, v := range arr {\n            s += v\n        }\n        sum += (s+capacity-1)/capacity\n    }\n    return sum\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub max_fill {\n    my($grid, $capacity) = @_;\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "pl",
    "prompt": "sub has_close_elements {\n    my($numbers, $threshold) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&has_close_elements;\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),1) || $candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),\"\") || $candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),1) || $candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),\"\") || $candidate->([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),1) || $candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),1) || $candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),\"\") || $candidate->([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n    for i, elem := range numbers {\n        for j, elem2 := range numbers {\n            if i != j {\n                distance := elem - elem2\n                if distance < 0 {\n                    distance = -distance\n                }\n                if distance < threshold {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub has_close_elements {\n    my($numbers, $threshold) = @_;\n"
  },
  {
    "name": "HumanEval_81_numerical_letter_grade",
    "language": "pl",
    "prompt": "sub numerical_letter_grade {\n    my($grades) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_81_numerical_letter_grade.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]) || $candidate->([4.0, 3, 1.7, 2, 3.5])==[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"]) || $candidate->([1.2])==[\"D+\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"D-\"]) || $candidate->([0.5])==[\"D-\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"E\"]) || $candidate->([0.0])==[\"E\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]) || $candidate->([1.0, 0.3, 1.5, 2.8, 3.3])==[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0, 0.7]),[\"E\", \"D-\"]) || $candidate->([0.0, 0.7])==[\"E\", \"D-\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc numerical_letter_grade(grades []float64) []string {\n    letterGrades := make([]string, len(grades))\n\n    for i, gpa := range grades {\n        switch {\n        case gpa == 4.0:\n            letterGrades[i] = \"A+\"\n        case gpa > 3.7:\n            letterGrades[i] = \"A\"\n        case gpa > 3.3:\n            letterGrades[i] = \"A-\"\n        case gpa > 3.0:\n            letterGrades[i] = \"B+\"\n        case gpa > 2.7:\n            letterGrades[i] = \"B\"\n        case gpa > 2.3:\n            letterGrades[i] = \"B-\"\n        case gpa > 2.0:\n            letterGrades[i] = \"C+\"\n        case gpa > 1.7:\n            letterGrades[i] = \"C\"\n        case gpa > 1.3:\n            letterGrades[i] = \"C-\"\n        case gpa > 1.0:\n            letterGrades[i] = \"D+\"\n        case gpa > 0.7:\n            letterGrades[i] = \"D\"\n        case gpa > 0.0:\n            letterGrades[i] = \"D-\"\n        default:\n            letterGrades[i] = \"E\"\n        }\n    }\n\n    return letterGrades\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub numerical_letter_grade {\n    my($grades) = @_;\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "pl",
    "prompt": "sub x_or_y {\n    my($n, $x, $y) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&x_or_y;\n        if(eq_deeply($candidate->(7, 34, 12),34) || $candidate->(7, 34, 12)==34) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 5),5) || $candidate->(15, 8, 5)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 33, 5212),33) || $candidate->(3, 33, 5212)==33) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1259, 3, 52),3) || $candidate->(1259, 3, 52)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7919, -1, 12),-1) || $candidate->(7919, -1, 12)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3609, 1245, 583),583) || $candidate->(3609, 1245, 583)==583) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(91, 56, 129),129) || $candidate->(91, 56, 129)==129) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 34, 1234),1234) || $candidate->(6, 34, 1234)==1234) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 0),0) || $candidate->(1, 2, 0)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 0),2) || $candidate->(2, 2, 0)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc x_or_y(n int, x int, y int) int {\n\tif n == 1 {\n\t\treturn y\n\t}\n\tfor i := 2; i < n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn y\n\t\t}\n\t}\n\treturn x\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub x_or_y {\n    my($n, $x, $y) = @_;\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "pl",
    "prompt": "sub specialFilter {\n    my($nums) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&specialFilter;\n        if(eq_deeply($candidate->([5, -2, 1, -5]),0) || $candidate->([5, -2, 1, -5])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, -73, 14, -15]),1) || $candidate->([15, -73, 14, -15])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([33, -2, -3, 45, 21, 109]),2) || $candidate->([33, -2, -3, 45, 21, 109])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([43, -12, 93, 125, 121, 109]),4) || $candidate->([43, -12, 93, 125, 121, 109])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([71, -2, -33, 75, 21, 19]),3) || $candidate->([71, -2, -33, 75, 21, 19])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),0) || $candidate->([1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),0) || $candidate->([])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc specialFilter(nums []int) int {\n    count := 0\n    for _, num := range nums {\n        if num > 10 {\n            numberAsString := fmt.Sprintf(\"%d\", num)\n            if (numberAsString[0] - '0')%2 == 1 && (numberAsString[len(numberAsString)-1]-'0')%2 == 1 {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub specialFilter {\n    my($nums) = @_;\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "pl",
    "prompt": "sub digitSum {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digitSum;\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abAB\"),131) || $candidate->(\"abAB\")==131) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcCd\"),67) || $candidate->(\"abcCd\")==67) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"helloE\"),69) || $candidate->(\"helloE\")==69) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"woArBld\"),131) || $candidate->(\"woArBld\")==131) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aAaaaXa\"),153) || $candidate->(\"aAaaaXa\")==153) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\" How are yOu?\"),151) || $candidate->(\" How are yOu?\")==151) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"You arE Very Smart\"),327) || $candidate->(\"You arE Very Smart\")==327) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage digitSum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc digitSum(s string) int {\n    sum := 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub digitSum {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "pl",
    "prompt": "sub sum_squares {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n        if(eq_deeply($candidate->([1, 2, 3]),6) || $candidate->([1, 2, 3])==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 9]),14) || $candidate->([1, 4, 9])==14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),0) || $candidate->([])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 1, 1, 1, 1, 1, 1]),9) || $candidate->([1, 1, 1, 1, 1, 1, 1, 1, 1])==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3) || $candidate->([-1, -1, -1, -1, -1, -1, -1, -1, -1])==-3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0]),0) || $candidate->([0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -5, 2, -1, -5]),-126) || $candidate->([-1, -5, 2, -1, -5])==-126) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-56, -99, 1, 0, -2]),3030) || $candidate->([-56, -99, 1, 0, -2])==3030) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0) || $candidate->([-1, 0, 0, 0, 0, 0, 0, 0, -1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196) || $candidate->([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])==-14196) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448) || $candidate->([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])==-1448) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sum_squares(lst []int) int {\n    result := 0\n\n    for i, v := range lst {\n        if i%3 == 0 {\n            result += v * v\n        } else if i%4 == 0 && i%3 != 0 {\n            result += v * v * v\n        } else {\n            result += v\n        }\n    }\n\n    return result\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub sum_squares {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "pl",
    "prompt": "sub count_up_to {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_up_to;\n        if(eq_deeply($candidate->(5),[2, 3]) || $candidate->(5)==[2, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[2, 3, 5]) || $candidate->(6)==[2, 3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[2, 3, 5]) || $candidate->(7)==[2, 3, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),[2, 3, 5, 7]) || $candidate->(10)==[2, 3, 5, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[]) || $candidate->(0)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(22),[2, 3, 5, 7, 11, 13, 17, 19]) || $candidate->(22)==[2, 3, 5, 7, 11, 13, 17, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[]) || $candidate->(1)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),[2, 3, 5, 7, 11, 13, 17]) || $candidate->(18)==[2, 3, 5, 7, 11, 13, 17]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]) || $candidate->(47)==[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) || $candidate->(101)==[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage count_up_to_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc count_up_to(n int) []int {\n\tprimes := make([]int, 0)\n\tfor i := 2; i < n; i++ {\n\t\tis_prime := true\n\t\tfor j := 2; j < i; j++ {\n\t\t\tif i%j == 0 {\n\t\t\t\tis_prime = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif is_prime {\n\t\t\tprimes = append(primes, i)\n\t\t}\n\t}\n\treturn primes\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub count_up_to {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "pl",
    "prompt": "sub unique {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]) || $candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123])==[0, 2, 3, 5, 9, 123]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc unique(l []int) []int {\n    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for k := range m {\n        r = append(r, k)\n    }\n    for i := 0; i < len(r); i++ {\n        for j := i + 1; j < len(r); j++ {\n            if r[i] > r[j] {\n                r[i], r[j] = r[j], r[i]\n            }\n        }\n    }\n    return r\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub unique {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "pl",
    "prompt": "sub fib {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n        if(eq_deeply($candidate->(10),55) || $candidate->(10)==55) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21) || $candidate->(8)==21) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89) || $candidate->(11)==89) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144) || $candidate->(12)==144) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc fib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub fib {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "pl",
    "prompt": "sub fizz_buzz {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fizz_buzz;\n        if(eq_deeply($candidate->(50),0) || $candidate->(50)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(78),2) || $candidate->(78)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(79),3) || $candidate->(79)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),3) || $candidate->(100)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(200),6) || $candidate->(200)==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4000),192) || $candidate->(4000)==192) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10000),639) || $candidate->(10000)==639) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100000),8026) || $candidate->(100000)==8026) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc fizz_buzz(n int) int {\n\tns := make([]int, 0)\n\tfor i := 0; i < n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tns = append(ns, i)\n\t\t}\n\t}\n\ts := \"\"\n\tfor _, i := range ns {\n\t\ts += fmt.Sprintf(\"%d\", i)\n\t}\n\tans := 0\n\tfor _, c := range s {\n\t\tif c == '7' {\n\t\t\tans += 1\n\t\t}\n\t}\n\treturn ans\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub fizz_buzz {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "pl",
    "prompt": "sub valid_date {\n    my($date) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&valid_date;\n        if(eq_deeply($candidate->(\"03-11-2000\"),1) || $candidate->(\"03-11-2000\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15-01-2012\"),\"\") || $candidate->(\"15-01-2012\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-0-2040\"),\"\") || $candidate->(\"04-0-2040\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"06-04-2020\"),1) || $candidate->(\"06-04-2020\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"01-01-2007\"),1) || $candidate->(\"01-01-2007\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"03-32-2011\"),\"\") || $candidate->(\"03-32-2011\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-31-3000\"),\"\") || $candidate->(\"04-31-3000\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"06-06-2005\"),1) || $candidate->(\"06-06-2005\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"21-31-2000\"),\"\") || $candidate->(\"21-31-2000\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-12-2003\"),1) || $candidate->(\"04-12-2003\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04122003\"),\"\") || $candidate->(\"04122003\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"20030412\"),\"\") || $candidate->(\"20030412\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04\"),\"\") || $candidate->(\"2003-04\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04-12\"),\"\") || $candidate->(\"2003-04-12\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-2003\"),\"\") || $candidate->(\"04-2003\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc valid_date(date string) bool {\n    var month, day, year int\n    _, err := fmt.Sscanf(date, \"%d-%d-%d\", &month, &day, &year)\n    if err != nil {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if month == 2 {\n        if year%4 == 0 && (year%100 != 0 || year%400 == 0) {\n            if day < 1 || day > 29 {\n                return false\n            }\n        } else {\n            if day < 1 || day > 28 {\n                return false\n            }\n        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n    } else {\n        if day < 1 || day > 31 {\n            return false\n        }\n    }\n    return true\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub valid_date {\n    my($date) = @_;\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "pl",
    "prompt": "sub add {\n    my($x, $y) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->(0, 1),1) || $candidate->(0, 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 0),1) || $candidate->(1, 0)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),5) || $candidate->(2, 3)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 7),12) || $candidate->(5, 7)==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 5),12) || $candidate->(7, 5)==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc add(x int, y int) int {\n    return x + y\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub add {\n    my($x, $y) = @_;\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "pl",
    "prompt": "sub triples_sum_to_zero {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triples_sum_to_zero;\n        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\") || $candidate->([1, 3, 5, 0])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, -1]),\"\") || $candidate->([1, 3, 5, -1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2, 1]),1) || $candidate->([1, 3, -2, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\") || $candidate->([1, 2, 3, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 5, 7]),\"\") || $candidate->([1, 2, 5, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1) || $candidate->([2, 4, -5, 3, 9, 7])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\") || $candidate->([1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, -100]),\"\") || $candidate->([1, 3, 5, -100])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 3, 5, -100]),\"\") || $candidate->([100, 3, 5, -100])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc triples_sum_to_zero(l []int) bool {\n\tfor i := 0; i < len(l); i++ {\n\t\tfor j := i + 1; j < len(l); j++ {\n\t\t\tfor k := j + 1; k < len(l); k++ {\n\t\t\t\tif l[i]+l[j]+l[k] == 0 {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub triples_sum_to_zero {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "pl",
    "prompt": "sub largest_divisor {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_divisor;\n        if(eq_deeply($candidate->(3),1) || $candidate->(3)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1) || $candidate->(7)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),5) || $candidate->(10)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),50) || $candidate->(100)==50) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49),7) || $candidate->(49)==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc largest_divisor(n int) int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return 0\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub largest_divisor {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "pl",
    "prompt": "sub smallest_change {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&smallest_change;\n        if(eq_deeply($candidate->([1, 2, 3, 5, 4, 7, 9, 6]),4) || $candidate->([1, 2, 3, 5, 4, 7, 9, 6])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 3, 2, 2]),1) || $candidate->([1, 2, 3, 4, 3, 2, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 2]),1) || $candidate->([1, 4, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 4, 2]),1) || $candidate->([1, 4, 4, 2])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 1]),0) || $candidate->([1, 2, 3, 2, 1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 1, 1, 3]),0) || $candidate->([3, 1, 1, 3])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),0) || $candidate->([1])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),1) || $candidate->([0, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc smallest_change(arr []int) int {\n\tans := 0\n\tfor i := 0; i < len(arr)/2; i++ {\n\t\tif arr[i] != arr[len(arr)-i-1] {\n\t\t\tans += 1\n\t\t}\n\t}\n\treturn ans\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub smallest_change {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "pl",
    "prompt": "sub below_threshold {\n    my($l, $t) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_threshold;\n        if(eq_deeply($candidate->([1, 2, 4, 10], 100),1) || $candidate->([1, 2, 4, 10], 100)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 5),\"\") || $candidate->([1, 20, 4, 10], 5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 21),1) || $candidate->([1, 20, 4, 10], 21)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10], 22),1) || $candidate->([1, 20, 4, 10], 22)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 8, 4, 10], 11),1) || $candidate->([1, 8, 4, 10], 11)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 8, 4, 10], 10),\"\") || $candidate->([1, 8, 4, 10], 10)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc below_threshold(l []int, t int) bool {\n    for _, e := range l {\n        if e >= t {\n            return false\n        }\n    }\n    return true\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub below_threshold {\n    my($l, $t) = @_;\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "pl",
    "prompt": "sub modp {\n    my($n, $p) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3) || $candidate->(3, 5)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2) || $candidate->(1101, 101)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1) || $candidate->(0, 101)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8) || $candidate->(3, 11)==8) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1) || $candidate->(100, 101)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4) || $candidate->(30, 5)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3) || $candidate->(31, 5)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc modp(n int, p int) int {\n    ret := 1\n    for i := 0; i < n; i++ {\n        ret = (2 * ret) % p\n    }\n    return ret\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub modp {\n    my($n, $p) = @_;\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "pl",
    "prompt": "sub count_upper {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_upper;\n        if(eq_deeply($candidate->(\"aBCdEf\"),1) || $candidate->(\"aBCdEf\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdefg\"),0) || $candidate->(\"abcdefg\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dBBE\"),0) || $candidate->(\"dBBE\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"B\"),0) || $candidate->(\"B\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"U\"),1) || $candidate->(\"U\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"EEEE\"),2) || $candidate->(\"EEEE\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc count_upper(s string) int {\n\tcount := 0\n\tfor i := 0; i < len(s); i += 2 {\n\t\tif s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub count_upper {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "pl",
    "prompt": "sub is_multiply_prime {\n    my($a) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_multiply_prime;\n        if(eq_deeply($candidate->(5),\"\") || $candidate->(5)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),1) || $candidate->(30)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1) || $candidate->(8)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\") || $candidate->(10)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(125),1) || $candidate->(125)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(105),1) || $candidate->(105)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(126),\"\") || $candidate->(126)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(729),\"\") || $candidate->(729)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(891),\"\") || $candidate->(891)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1001),1) || $candidate->(1001)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_multiply_prime(a int) bool {\n    is_prime := func(n int) bool {\n        for j := 2; j < n; j++ {\n            if n%j == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    for i := 2; i < 101; i++ {\n        if !is_prime(i) {\n            continue\n        }\n        for j := 2; j < 101; j++ {\n            if !is_prime(j) {\n                continue\n            }\n            for k := 2; k < 101; k++ {\n                if !is_prime(k) {\n                    continue\n                }\n                if i*j*k == a {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_multiply_prime {\n    my($a) = @_;\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "pl",
    "prompt": "sub separate_paren_groups {\n    my($paren_string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&separate_paren_groups;\n        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]) || $candidate->(\"(()()) ((())) () ((())()())\")==[\"(()())\", \"((()))\", \"()\", \"((())()())\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]) || $candidate->(\"() (()) ((())) (((())))\")==[\"()\", \"(())\", \"((()))\", \"(((())))\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[\"(()(())((())))\"]) || $candidate->(\"(()(())((())))\")==[\"(()(())((())))\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]) || $candidate->(\"( ) (( )) (( )( ))\")==[\"()\", \"(())\", \"(()())\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc separate_paren_groups(paren_string string) []string {\n    result := []string{}\n    currentString := []rune{}\n    currentDepth := 0\n\n    for _, c := range paren_string {\n        if c == '(' {\n            currentDepth += 1\n            currentString = append(currentString, c)\n        } else if c == ')' {\n            currentDepth -= 1\n            currentString = append(currentString, c)\n\n            if currentDepth == 0 {\n                result = append(result, string(currentString))\n                currentString = []rune{}\n            }\n        }\n    }\n\n    return result\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub separate_paren_groups {\n    my($paren_string) = @_;\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "pl",
    "prompt": "sub filter_integers {\n    my($values) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]) || $candidate->([4, {}, [], 23.2, 9, \"adasd\"])==[4, 9]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]) || $candidate->([3, \"c\", 3, 3, \"a\", \"b\"])==[3, 3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc filter_integers(values []interface{}) []int {\n    res := []int{}\n    for _, v := range values {\n        if i, ok := v.(int); ok {\n            res = append(res, i)\n        }\n    }\n    return res\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub filter_integers {\n    my($values) = @_;\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "pl",
    "prompt": "sub skjkasdkd {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&skjkasdkd;\n        if(eq_deeply($candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10) || $candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])==10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25) || $candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])==25) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13) || $candidate->([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])==13) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11) || $candidate->([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])==11) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 81, 12, 3, 1, 21]),3) || $candidate->([0, 81, 12, 3, 1, 21])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 8, 1, 2, 1, 7]),7) || $candidate->([0, 8, 1, 2, 1, 7])==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8191]),19) || $candidate->([8191])==19) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8191, 123456, 127, 7]),19) || $candidate->([8191, 123456, 127, 7])==19) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([127, 97, 8192]),10) || $candidate->([127, 97, 8192])==10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc skjkasdkd(lst []int) int {\n\tisPrime := func(n int) bool {\n\t\tfor i := 2; i*i <= n; i++ {\n\t\t\tif n%i == 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tmaxx := 0\n\tfor _, i := range lst {\n\t\tif i > maxx && isPrime(i) {\n\t\t\tmaxx = i\n\t\t}\n\t}\n\n\tresult := 0\n\tfor maxx > 0 {\n\t\tresult += maxx % 10\n\t\tmaxx /= 10\n\t}\n\n\treturn result\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub skjkasdkd {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "pl",
    "prompt": "sub total_match {\n    my($lst1, $lst2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&total_match;\n        if(eq_deeply($candidate->([], []),[]) || $candidate->([], [])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]) || $candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\"])==[\"hi\", \"hi\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]) || $candidate->([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])==[\"hi\", \"admin\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]) || $candidate->([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])==[\"4\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]) || $candidate->([\"hi\", \"admin\"], [\"hI\", \"Hi\"])==[\"hI\", \"Hi\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]) || $candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])==[\"hI\", \"hi\", \"hi\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]) || $candidate->([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"])==[\"hi\", \"admin\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([], [\"this\"]),[]) || $candidate->([], [\"this\"])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\"], []),[]) || $candidate->([\"this\"], [])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage total_match_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc total_match(lst1 []string, lst2 []string) []string {\n\tl1 := 0\n\tfor _, st := range lst1 {\n\t\tl1 += len(st)\n\t}\n\n\tl2 := 0\n\tfor _, st := range lst2 {\n\t\tl2 += len(st)\n\t}\n\n\tif l1 <= l2 {\n\t\treturn lst1\n\t} else {\n\t\treturn lst2\n\t}\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub total_match {\n    my($lst1, $lst2) = @_;\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "pl",
    "prompt": "sub car_race_collision {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&car_race_collision;\n        if(eq_deeply($candidate->(2),4) || $candidate->(2)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),9) || $candidate->(3)==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),16) || $candidate->(4)==16) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),64) || $candidate->(8)==64) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),100) || $candidate->(10)==100) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc car_race_collision(n int) int {\n    return n * n\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub car_race_collision {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "pl",
    "prompt": "sub is_simple_power {\n    my($x, $n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_simple_power;\n        if(eq_deeply($candidate->(16, 2),1) || $candidate->(16, 2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(143214, 16),\"\") || $candidate->(143214, 16)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2),1) || $candidate->(4, 2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),1) || $candidate->(9, 3)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16, 4),1) || $candidate->(16, 4)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(24, 2),\"\") || $candidate->(24, 2)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(128, 4),\"\") || $candidate->(128, 4)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 6),\"\") || $candidate->(12, 6)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1),1) || $candidate->(1, 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 12),1) || $candidate->(1, 12)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_simple_power(x int, n int) bool {\n    if n == 1 {\n        return x == 1\n    }\n    power := 1\n    for power < x {\n        power *= n\n    }\n    return power == x\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_simple_power {\n    my($x, $n) = @_;\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "pl",
    "prompt": "sub incr_list {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&incr_list;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2]) || $candidate->([3, 2, 1])==[4, 3, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]) || $candidate->([5, 2, 5, 2, 3, 3, 9, 0, 123])==[6, 3, 6, 3, 4, 4, 10, 1, 124]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc incr_list(l []int) []int {\n    r := make([]int, len(l))\n    for i, e := range l {\n        r[i] = e + 1\n    }\n    return r\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub incr_list {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "pl",
    "prompt": "sub flip_case {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\") || $candidate->(\"Hello!\")==\"hELLO!\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") || $candidate->(\"These violent delights have violent ends\")==\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc flip_case(myString string) string {\n    result := \"\"\n    for _, c := range myString {\n        if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub flip_case {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "pl",
    "prompt": "sub sorted_list_sum {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sorted_list_sum;\n        if(eq_deeply($candidate->([\"aa\", \"a\", \"aaa\"]),[\"aa\"]) || $candidate->([\"aa\", \"a\", \"aaa\"])==[\"aa\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]) || $candidate->([\"school\", \"AI\", \"asdf\", \"b\"])==[\"AI\", \"asdf\", \"school\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"d\", \"b\", \"c\", \"a\"]),[]) || $candidate->([\"d\", \"b\", \"c\", \"a\"])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]) || $candidate->([\"d\", \"dcba\", \"abcd\", \"a\"])==[\"abcd\", \"dcba\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"AI\", \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]) || $candidate->([\"AI\", \"ai\", \"au\"])==[\"AI\", \"ai\", \"au\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]) || $candidate->([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]) || $candidate->([\"aaaa\", \"bbbb\", \"dd\", \"cc\"])==[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sorted_list_sum(lst []string) []string {\n    for i := 0; i < len(lst); i++ {\n        for j := i+1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    new_lst := []string{}\n    for _, i := range lst {\n        if len(i)%2 == 0 {\n            new_lst = append(new_lst, i)\n        }\n    }\n    for i := 0; i < len(new_lst); i++ {\n        for j := i+1; j < len(new_lst); j++ {\n            if len(new_lst[i]) > len(new_lst[j]) {\n                new_lst[i], new_lst[j] = new_lst[j], new_lst[i]\n            }\n        }\n    }\n    return new_lst\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub sorted_list_sum {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "pl",
    "prompt": "sub even_odd_palindrome {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_palindrome;\n        if(eq_deeply($candidate->(123),[8, 13]) || $candidate->(123)==[8, 13]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),[4, 6]) || $candidate->(12)==[4, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1, 2]) || $candidate->(3)==[1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),[6, 8]) || $candidate->(63)==[6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(25),[5, 6]) || $candidate->(25)==[5, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19),[4, 6]) || $candidate->(19)==[4, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[4, 5]) || $candidate->(9)==[4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[0, 1]) || $candidate->(1)==[0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc even_odd_palindrome(n int) []interface{} {\n    is_palindrome := func(n int) bool {\n        s := fmt.Sprintf(\"%d\", n)\n        for i := 0; i < len(s)/2; i++ {\n            if s[i] != s[len(s)-i-1] {\n                return false\n            }\n        }\n        return true\n    }\n\n    even_palindrome_count := 0\n    odd_palindrome_count := 0\n\n    for i := 1; i <= n; i++ {\n        if i%2 == 1 && is_palindrome(i) {\n            odd_palindrome_count++\n        } else if i%2 == 0 && is_palindrome(i) {\n            even_palindrome_count++\n        }\n    }\n    return []interface{}{even_palindrome_count, odd_palindrome_count}\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub even_odd_palindrome {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "pl",
    "prompt": "sub tri {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tri;\n        if(eq_deeply($candidate->(3),[1, 3, 2, 8]) || $candidate->(3)==[1, 3, 2, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[1, 3, 2, 8, 3]) || $candidate->(4)==[1, 3, 2, 8, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1, 3, 2, 8, 3, 15]) || $candidate->(5)==[1, 3, 2, 8, 3, 15]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[1, 3, 2, 8, 3, 15, 4]) || $candidate->(6)==[1, 3, 2, 8, 3, 15, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1, 3, 2, 8, 3, 15, 4, 24]) || $candidate->(7)==[1, 3, 2, 8, 3, 15, 4, 24]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]) || $candidate->(8)==[1, 3, 2, 8, 3, 15, 4, 24, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]) || $candidate->(9)==[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]) || $candidate->(20)==[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1]) || $candidate->(0)==[1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1, 3]) || $candidate->(1)==[1, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n    }\n    myTri := []int{1, 3}\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            myTri = append(myTri, i/2+1)\n        } else {\n            myTri = append(myTri, myTri[i-1]+myTri[i-2]+(i+3)/2)\n        }\n    }\n    return myTri\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub tri {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "pl",
    "prompt": "sub change_base {\n    my($x, $base) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&change_base;\n        if(eq_deeply($candidate->(8, 3),\"22\") || $candidate->(8, 3)==\"22\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 3),\"100\") || $candidate->(9, 3)==\"100\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(234, 2),\"11101010\") || $candidate->(234, 2)==\"11101010\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16, 2),\"10000\") || $candidate->(16, 2)==\"10000\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8, 2),\"1000\") || $candidate->(8, 2)==\"1000\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 2),\"111\") || $candidate->(7, 2)==\"111\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),\"2\") || $candidate->(2, 3)==\"2\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 4),\"3\") || $candidate->(3, 4)==\"3\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5),\"4\") || $candidate->(4, 5)==\"4\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 6),\"5\") || $candidate->(5, 6)==\"5\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 7),\"6\") || $candidate->(6, 7)==\"6\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 8),\"7\") || $candidate->(7, 8)==\"7\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc change_base(x int, base int) string {\n    ret := \"\"\n    for x > 0 {\n        ret = fmt.Sprintf(\"%d%s\", x%base, ret)\n        x /= base\n    }\n    return ret\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub change_base {\n    my($x, $base) = @_;\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "pl",
    "prompt": "sub cycpattern_check {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&cycpattern_check;\n        if(eq_deeply($candidate->(\"xyzw\", \"xyw\"),\"\") || $candidate->(\"xyzw\", \"xyw\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"yello\", \"ell\"),1) || $candidate->(\"yello\", \"ell\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"whattup\", \"ptut\"),\"\") || $candidate->(\"whattup\", \"ptut\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"efef\", \"fee\"),1) || $candidate->(\"efef\", \"fee\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abab\", \"aabb\"),\"\") || $candidate->(\"abab\", \"aabb\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"winemtt\", \"tinem\"),1) || $candidate->(\"winemtt\", \"tinem\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage cycpattern_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc cycpattern_check(a string, b string) bool {\n\tl := len(b)\n\tpat := b + b\n\tfor i := 0; i < len(a)-l+1; i++ {\n\t\tfor j := 0; j < l+1; j++ {\n\t\t\tif a[i:i+l] == pat[j:j+l] {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub cycpattern_check {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_114_minSubArraySum",
    "language": "pl",
    "prompt": "sub minSubArraySum {\n    my($nums) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_114_minSubArraySum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minSubArraySum;\n        if(eq_deeply($candidate->([2, 3, 4, 1, 2, 4]),1) || $candidate->([2, 3, 4, 1, 2, 4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3]),-6) || $candidate->([-1, -2, -3])==-6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3, 2, -10]),-14) || $candidate->([-1, -2, -3, 2, -10])==-14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9999999999999999]),-9999999999999999) || $candidate->([-9999999999999999])==-9999999999999999) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 10, 20, 1000000]),0) || $candidate->([0, 10, 20, 1000000])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3, 10, -5]),-6) || $candidate->([-1, -2, -3, 10, -5])==-6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, -1, -2, -3, 10, -5]),-6) || $candidate->([100, -1, -2, -3, 10, -5])==-6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 11, 13, 8, 3, 4]),3) || $candidate->([10, 11, 13, 8, 3, 4])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, -33, 32, -1, 0, -2]),-33) || $candidate->([100, -33, 32, -1, 0, -2])==-33) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10]),-10) || $candidate->([-10])==-10) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7]),7) || $candidate->([7])==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1]),-1) || $candidate->([1, -1])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc minSubArraySum(nums []int) int {\n    maxSum := 0\n    s := 0\n    for _, num := range nums {\n        s += -num\n        if s < 0 {\n            s = 0\n        }\n        if s > maxSum {\n            maxSum = s\n        }\n    }\n    if maxSum == 0 {\n        maxSum = -1 << 31\n        for _, num := range nums {\n            if -num > maxSum {\n                maxSum = -num\n            }\n        }\n    }\n    return -maxSum\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub minSubArraySum {\n    my($nums) = @_;\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "pl",
    "prompt": "sub sort_array {\n    my($array) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]) || $candidate->([5])==[5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]) || $candidate->([2, 4, 3, 0, 1, 5])==[0, 1, 2, 3, 4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]) || $candidate->([2, 4, 3, 0, 1, 5, 6])==[6, 5, 4, 3, 2, 1, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 1]),[1, 2]) || $candidate->([2, 1])==[1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]) || $candidate->([15, 42, 87, 32, 11, 0])==[0, 11, 15, 32, 42, 87]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23, 21, 14, 11]) || $candidate->([21, 14, 23, 11])==[23, 21, 14, 11]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n    \"sort\"\n)\n\nfunc sort_array(array []int) []int {\n\tif len(array) == 0 {\n\t\treturn []int{}\n\t}\n\n\treverse := (array[0]+array[len(array)-1])%2 == 0\n\tsort.Ints(array)\n\n\tif reverse {\n\t\tfor i, j := 0, len(array)-1; i < j; i, j = i+1, j-1 {\n\t\t\tarray[i], array[j] = array[j], array[i]\n\t\t}\n\t}\n\n\treturn array\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub sort_array {\n    my($array) = @_;\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "pl",
    "prompt": "sub derivative {\n    my($xs) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&derivative;\n        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),[1, 4, 12, 20]) || $candidate->([3, 1, 2, 4, 5])==[1, 4, 12, 20]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 6]) || $candidate->([1, 2, 3])==[2, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[2, 2]) || $candidate->([3, 2, 1])==[2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1, 0, 4]),[2, 2, 0, 16]) || $candidate->([3, 2, 1, 0, 4])==[2, 2, 0, 16]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),[]) || $candidate->([1])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc derivative(xs []int) []int {\n    ys := make([]int, len(xs)-1)\n    for i, x := range xs[1:] {\n        ys[i] = (i+1) * x\n    }\n    return ys\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub derivative {\n    my($xs) = @_;\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "pl",
    "prompt": "sub fibfib {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fibfib;\n        if(eq_deeply($candidate->(2),1) || $candidate->(2)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),0) || $candidate->(1)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),4) || $candidate->(5)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),24) || $candidate->(8)==24) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),81) || $candidate->(10)==81) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),274) || $candidate->(12)==274) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14),927) || $candidate->(14)==927) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub fibfib {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "pl",
    "prompt": "sub truncate_number {\n    my($number) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5) || $candidate->(3.5)==0.5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25) || $candidate->(1.25)==0.25) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0) || $candidate->(123.0)==0.0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc truncate_number(number float64) float64 {\n    return number - float64(int(number))\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub truncate_number {\n    my($number) = @_;\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "pl",
    "prompt": "sub max_element {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_element;\n        if(eq_deeply($candidate->([1, 2, 3]),3) || $candidate->([1, 2, 3])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124) || $candidate->([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])==124) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc max_element(l []int) int {\n    m := l[0]\n    for _, e := range l {\n        if e > m {\n            m = e\n        }\n    }\n    return m\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub max_element {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "pl",
    "prompt": "sub prime_fib {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_fib;\n        if(eq_deeply($candidate->(1),2) || $candidate->(1)==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),3) || $candidate->(2)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),5) || $candidate->(3)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),13) || $candidate->(4)==13) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),89) || $candidate->(5)==89) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),233) || $candidate->(6)==233) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1597) || $candidate->(7)==1597) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28657) || $candidate->(8)==28657) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),514229) || $candidate->(9)==514229) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),433494437) || $candidate->(10)==433494437) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc prime_fib(n int) int {\n    is_prime := func(p int) bool {\n        if p < 2 {\n            return false\n        }\n        for k := 2; k < p; k++ {\n            if p%k == 0 {\n                return false\n            }\n        }\n        return true\n    }\n    f := []int{0, 1}\n    for {\n        f = append(f, f[len(f)-1]+f[len(f)-2])\n        if is_prime(f[len(f)-1]) {\n            n -= 1\n        }\n        if n == 0 {\n            return f[len(f)-1]\n        }\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub prime_fib {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "pl",
    "prompt": "sub sum_product {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_product;\n        if(eq_deeply($candidate->([]),[0, 1]) || $candidate->([])==[0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1]),[3, 1]) || $candidate->([1, 1, 1])==[3, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 0]),[100, 0]) || $candidate->([100, 0])==[100, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 7]),[15, 105]) || $candidate->([3, 5, 7])==[15, 105]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),[10, 10]) || $candidate->([10])==[10, 10]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sum_product(numbers []int) []interface{} {\n    sumValue := 0\n    prodValue := 1\n\n    for _, n := range numbers {\n        sumValue += n\n        prodValue *= n\n    }\n\n    return []interface{}{sumValue, prodValue}\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub sum_product {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "pl",
    "prompt": "sub add_elements {\n    my($arr, $k) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_elements;\n        if(eq_deeply($candidate->([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4) || $candidate->([1, -2, -3, 41, 57, 76, 87, 88, 99], 3)==-4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111, 121, 3, 4000, 5, 6], 2),0) || $candidate->([111, 121, 3, 4000, 5, 6], 2)==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125) || $candidate->([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)==125) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24) || $candidate->([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)==24) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1], 1),1) || $candidate->([1], 1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc add_elements(arr []int, k int) int {\n    sum := 0\n    for _, elem := range arr[:k] {\n        if elem < 100 {\n            sum += elem\n        }\n    }\n    return sum\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub add_elements {\n    my($arr, $k) = @_;\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "pl",
    "prompt": "sub eat {\n    my($number, $need, $remaining) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&eat;\n        if(eq_deeply($candidate->(5, 6, 10),[11, 4]) || $candidate->(5, 6, 10)==[11, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 9),[12, 1]) || $candidate->(4, 8, 9)==[12, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 10, 10),[11, 0]) || $candidate->(1, 10, 10)==[11, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 11, 5),[7, 0]) || $candidate->(2, 11, 5)==[7, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 7),[9, 2]) || $candidate->(4, 5, 7)==[9, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 1),[5, 0]) || $candidate->(4, 5, 1)==[5, 0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage eat_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc eat(number int, need int, remaining int) []int {\n\tif need <= remaining {\n\t\treturn []int{number + need, remaining - need}\n\t} else {\n\t\treturn []int{number + remaining, 0}\n\t}\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub eat {\n    my($number, $need, $remaining) = @_;\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "pl",
    "prompt": "sub filter_by_prefix {\n    my($strings, $prefix) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n        if(eq_deeply($candidate->([], \"john\"),[]) || $candidate->([], \"john\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]) || $candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\")==[\"xxx\", \"xxxAAA\", \"xxx\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc filter_by_prefix(strings []string, prefix string) []string {\n    var res []string\n    for _, s := range strings {\n        if len(s) >= len(prefix) && s[:len(prefix)] == prefix {\n            res = append(res, s)\n        }\n    }\n    return res\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub filter_by_prefix {\n    my($strings, $prefix) = @_;\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "pl",
    "prompt": "sub choose_num {\n    my($x, $y) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&choose_num;\n        if(eq_deeply($candidate->(12, 15),14) || $candidate->(12, 15)==14) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13, 12),-1) || $candidate->(13, 12)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(33, 12354),12354) || $candidate->(33, 12354)==12354) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5234, 5233),-1) || $candidate->(5234, 5233)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 29),28) || $candidate->(6, 29)==28) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27, 10),-1) || $candidate->(27, 10)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 7),-1) || $candidate->(7, 7)==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(546, 546),546) || $candidate->(546, 546)==546) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc choose_num(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if y%2 == 0 {\n        return y\n    }\n    if x == y {\n        return -1\n    }\n    return y - 1\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub choose_num {\n    my($x, $y) = @_;\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "pl",
    "prompt": "sub prime_length {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_length;\n        if(eq_deeply($candidate->(\"Hello\"),1) || $candidate->(\"Hello\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdcba\"),1) || $candidate->(\"abcdcba\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"kittens\"),1) || $candidate->(\"kittens\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"orange\"),\"\") || $candidate->(\"orange\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"wow\"),1) || $candidate->(\"wow\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"world\"),1) || $candidate->(\"world\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"MadaM\"),1) || $candidate->(\"MadaM\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Wow\"),1) || $candidate->(\"Wow\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"HI\"),1) || $candidate->(\"HI\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"go\"),1) || $candidate->(\"go\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"gogo\"),\"\") || $candidate->(\"gogo\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaaaaaaaaaaaa\"),\"\") || $candidate->(\"aaaaaaaaaaaaaaa\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Madam\"),1) || $candidate->(\"Madam\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"M\"),\"\") || $candidate->(\"M\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),\"\") || $candidate->(\"0\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc prime_length(myString string) bool {\n\tl := len(myString)\n\tif l == 0 || l == 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i < l; i++ {\n\t\tif l%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub prime_length {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "pl",
    "prompt": "sub sum_to_n {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_to_n;\n        if(eq_deeply($candidate->(1),1) || $candidate->(1)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),21) || $candidate->(6)==21) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),66) || $candidate->(11)==66) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),465) || $candidate->(30)==465) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),5050) || $candidate->(100)==5050) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc sum_to_n(n int) int {\n    return n * (n + 1) / 2\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub sum_to_n {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_140_fix_spaces",
    "language": "pl",
    "prompt": "sub fix_spaces {\n    my($text) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_140_fix_spaces.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fix_spaces;\n        if(eq_deeply($candidate->(\"Example\"),\"Example\") || $candidate->(\"Example\")==\"Example\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir Hanif \"),\"Mudasir_Hanif_\") || $candidate->(\"Mudasir Hanif \")==\"Mudasir_Hanif_\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\") || $candidate->(\"Yellow Yellow  Dirty  Fellow\")==\"Yellow_Yellow__Dirty__Fellow\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Exa   mple\"),\"Exa-mple\") || $candidate->(\"Exa   mple\")==\"Exa-mple\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\") || $candidate->(\"   Exa 1 2 2 mple\")==\"-Exa_1_2_2_mple\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc fix_spaces(text string) string {\n    new_text := \"\"\n    start, end := 0, 0\n    for i, c := range text {\n        if c == ' ' {\n            end += 1\n        } else {\n            if end - start > 2 {\n                new_text += \"-\"+string(c)\n            } else if end - start > 0 {\n                for j := 0; j < end-start; j++ {\n                    new_text += \"_\"\n                }\n                new_text += string(c)\n            } else {\n                new_text += string(c)\n            }\n            start, end = i+1, i+1\n        }\n    }\n    if end - start > 2 {\n        new_text += \"-\"\n    } else if end - start > 0 {\n        for j := 0; j < end-start; j++ {\n            new_text += \"_\"\n        }\n    }\n    return new_text\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub fix_spaces {\n    my($text) = @_;\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "pl",
    "prompt": "sub rolling_max {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rolling_max;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4]) || $candidate->([1, 2, 3, 4])==[1, 2, 3, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 1]),[4, 4, 4, 4]) || $candidate->([4, 3, 2, 1])==[4, 4, 4, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]) || $candidate->([3, 2, 3, 100, 3])==[3, 3, 3, 100, 100]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc rolling_max(numbers []int) []int {\n    runningMax := 0\n    result := make([]int, 0)\n\n    for _, n := range numbers {\n        if runningMax < n {\n            runningMax = n\n        }\n        result = append(result, runningMax)\n    }\n\n    return result\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub rolling_max {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "pl",
    "prompt": "sub get_closest_vowel {\n    my($word) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_closest_vowel;\n        if(eq_deeply($candidate->(\"yogurt\"),\"u\") || $candidate->(\"yogurt\")==\"u\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"full\"),\"u\") || $candidate->(\"full\")==\"u\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"easy\"),\"\") || $candidate->(\"easy\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eAsy\"),\"\") || $candidate->(\"eAsy\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\") || $candidate->(\"ali\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bad\"),\"a\") || $candidate->(\"bad\")==\"a\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"most\"),\"o\") || $candidate->(\"most\")==\"o\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\") || $candidate->(\"ab\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ba\"),\"\") || $candidate->(\"ba\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"quick\"),\"\") || $candidate->(\"quick\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\") || $candidate->(\"anime\")==\"i\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Asia\"),\"\") || $candidate->(\"Asia\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Above\"),\"o\") || $candidate->(\"Above\")==\"o\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc get_closest_vowel(word string) string {\n\tif len(word) < 3 {\n\t\treturn \"\"\n\t}\n\n\tvowels := map[rune]bool{\n\t\t'a': true, 'e': true, 'i': true, 'o': true, 'u': true,\n\t\t'A': true, 'E': true, 'I': true, 'O': true, 'U': true,\n\t}\n\n\tfor i := len(word) - 2; i > 0; i-- {\n\t\tif _, ok := vowels[rune(word[i])]; ok {\n\t\t\tif _, ok1 := vowels[rune(word[i+1])]; !ok1 {\n\t\t\t\tif _, ok2 := vowels[rune(word[i-1])]; !ok2 {\n\t\t\t\t\treturn string(word[i])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn \"\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub get_closest_vowel {\n    my($word) = @_;\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "pl",
    "prompt": "sub remove_duplicates {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2, 3, 4]) || $candidate->([1, 2, 3, 4])==[1, 2, 3, 4]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]) || $candidate->([1, 2, 3, 2, 4, 3, 5])==[1, 4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc remove_duplicates(numbers []int) []int {\n\tc := make(map[int]int)\n\tfor _, n := range numbers {\n\t\tc[n] += 1\n\t}\n\n\tresult := make([]int, 0)\n\tfor _, n := range numbers {\n\t\tif c[n] <= 1 {\n\t\t\tresult = append(result, n)\n\t\t}\n\t}\n\treturn result\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub remove_duplicates {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "pl",
    "prompt": "sub same_chars {\n    my($s0, $s1) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&same_chars;\n        if(eq_deeply($candidate->(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),1) || $candidate->(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\", \"dddddddabc\"),1) || $candidate->(\"abcd\", \"dddddddabc\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dddddddabc\", \"abcd\"),1) || $candidate->(\"dddddddabc\", \"abcd\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eabcd\", \"dddddddabc\"),\"\") || $candidate->(\"eabcd\", \"dddddddabc\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\", \"dddddddabcf\"),\"\") || $candidate->(\"abcd\", \"dddddddabcf\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),\"\") || $candidate->(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\", \"aaccc\"),\"\") || $candidate->(\"aabb\", \"aaccc\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc same_chars(s0 string, s1 string) bool {\n    set0 := make(map[rune]bool)\n    set1 := make(map[rune]bool)\n    for _, r := range s0 {\n        set0[r] = true\n    }\n    for _, r := range s1 {\n        set1[r] = true\n    }\n    return fmt.Sprint(set0) == fmt.Sprint(set1)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub same_chars {\n    my($s0, $s1) = @_;\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "pl",
    "prompt": "sub string_xor {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_xor;\n        if(eq_deeply($candidate->(\"111000\", \"101010\"),\"010010\") || $candidate->(\"111000\", \"101010\")==\"010010\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", \"1\"),\"0\") || $candidate->(\"1\", \"1\")==\"0\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0101\", \"0000\"),\"0101\") || $candidate->(\"0101\", \"0000\")==\"0101\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc string_xor(a string, b string) string {\n    var res string\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            res += \"0\"\n        } else {\n            res += \"1\"\n        }\n    }\n    return res\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub string_xor {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "pl",
    "prompt": "sub strlen {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strlen;\n        if(eq_deeply($candidate->(\"\"),0) || $candidate->(\"\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),1) || $candidate->(\"x\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdasnakj\"),9) || $candidate->(\"asdasnakj\")==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub strlen {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "pl",
    "prompt": "sub string_sequence {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_sequence;\n        if(eq_deeply($candidate->(0),\"0\") || $candidate->(0)==\"0\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),\"0 1 2 3\") || $candidate->(3)==\"0 1 2 3\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"0 1 2 3 4 5 6 7 8 9 10\") || $candidate->(10)==\"0 1 2 3 4 5 6 7 8 9 10\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc string_sequence(n int) string {\n    s := \"\"\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s[:len(s)-1]\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub string_sequence {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "pl",
    "prompt": "sub can_arrange {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&can_arrange;\n        if(eq_deeply($candidate->([1, 2, 4, 3, 5]),3) || $candidate->([1, 2, 4, 3, 5])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 5]),-1) || $candidate->([1, 2, 4, 5])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10]),2) || $candidate->([1, 4, 2, 5, 6, 7, 8, 9, 10])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 8, 5, 7, 3]),4) || $candidate->([4, 8, 5, 7, 3])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),-1) || $candidate->([])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc can_arrange(arr []int) int {\n\tind := -1\n\tfor i := 1; i < len(arr); i++ {\n\t\tif arr[i] < arr[i-1] {\n\t\t\tind = i\n\t\t}\n\t}\n\treturn ind\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub can_arrange {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "pl",
    "prompt": "sub add {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88) || $candidate->([4, 88])==88) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122) || $candidate->([4, 5, 6, 7, 2, 122])==122) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0) || $candidate->([4, 0, 6, 7])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12) || $candidate->([4, 4, 6, 8])==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst); i += 2 {\n        if lst[i]%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub add {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "pl",
    "prompt": "sub intersperse {\n    my($numbers, $delimeter) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersperse;\n        if(eq_deeply($candidate->([], 7),[]) || $candidate->([], 7)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]) || $candidate->([5, 6, 3, 2], 8)==[5, 8, 6, 8, 3, 8, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 2, 2], 2),[2, 2, 2, 2, 2]) || $candidate->([2, 2, 2], 2)==[2, 2, 2, 2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return []int{}\n    }\n\n    result := make([]int, 0)\n\n    for i, n := range numbers {\n        if i > 0 {\n            result = append(result, delimeter)\n        }\n        result = append(result, n)\n    }\n\n    return result\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub intersperse {\n    my($numbers, $delimeter) = @_;\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "pl",
    "prompt": "sub match_parens {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&match_parens;\n        if(eq_deeply($candidate->([\"()(\", \")\"]),\"Yes\") || $candidate->([\"()(\", \")\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")\", \")\"]),\"No\") || $candidate->([\")\", \")\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(()(())\", \"())())\"]),\"No\") || $candidate->([\"(()(())\", \"())())\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")())\", \"(()()(\"]),\"Yes\") || $candidate->([\")())\", \"(()()(\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(())))\", \"(()())((\"]),\"Yes\") || $candidate->([\"(())))\", \"(()())((\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"()\", \"())\"]),\"No\") || $candidate->([\"()\", \"())\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(()(\", \"()))()\"]),\"Yes\") || $candidate->([\"(()(\", \"()))()\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"((((\", \"((())\"]),\"No\") || $candidate->([\"((((\", \"((())\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")(()\", \"(()(\"]),\"No\") || $candidate->([\")(()\", \"(()(\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")(\", \")(\"]),\"No\") || $candidate->([\")(\", \")(\"])==\"No\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"(\", \")\"]),\"Yes\") || $candidate->([\"(\", \")\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\")\", \"(\"]),\"Yes\") || $candidate->([\")\", \"(\"])==\"Yes\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage match_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc match_parens(lst []string) string {\n    check := func(s string) bool {\n        val := 0\n        for _, i := range s {\n            if i == '(' {\n                val = val + 1\n            } else {\n                val = val - 1\n            }\n            if val < 0 {\n                return false\n            }\n        }\n        return val == 0\n    }\n\n    S1 := lst[0] + lst[1]\n    S2 := lst[1] + lst[0]\n    if check(S1) || check(S2) {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub match_parens {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "pl",
    "prompt": "sub generate_integers {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&generate_integers;\n        if(eq_deeply($candidate->(2, 10),[2, 4, 6, 8]) || $candidate->(2, 10)==[2, 4, 6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 2),[2, 4, 6, 8]) || $candidate->(10, 2)==[2, 4, 6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(132, 2),[2, 4, 6, 8]) || $candidate->(132, 2)==[2, 4, 6, 8]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17, 89),[]) || $candidate->(17, 89)==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc generate_integers(a int, b int) []int {\n    lower := 2\n    if a > b {\n        lower = b\n    } else {\n        lower = a\n    }\n    if lower < 2 {\n        lower = 2\n    }\n\n    upper := 8\n    if a > b {\n        upper = a\n    } else {\n        upper = b\n    }\n    if upper > 8 {\n        upper = 8\n    }\n\n    var result []int\n    for i := lower; i <= upper; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub generate_integers {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "pl",
    "prompt": "sub exchange {\n    my($lst1, $lst2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&exchange;\n        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\") || $candidate->([1, 2, 3, 4], [1, 2, 3, 4])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\") || $candidate->([1, 2, 3, 4], [1, 5, 3, 4])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\") || $candidate->([1, 2, 3, 4], [2, 1, 4, 3])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 4]),\"YES\") || $candidate->([5, 7, 3], [2, 6, 4])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 3]),\"NO\") || $candidate->([5, 7, 3], [2, 6, 3])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\") || $candidate->([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 200], [200, 200]),\"YES\") || $candidate->([100, 200], [200, 200])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc exchange(lst1 []int, lst2 []int) string {\n\todd := 0\n\teven := 0\n\tfor _, i := range lst1 {\n\t\tif i%2 == 1 {\n\t\t\todd += 1\n\t\t}\n\t}\n\tfor _, i := range lst2 {\n\t\tif i%2 == 0 {\n\t\t\teven += 1\n\t\t}\n\t}\n\tif even >= odd {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub exchange {\n    my($lst1, $lst2) = @_;\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "pl",
    "prompt": "sub is_equal_to_sum_even {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_equal_to_sum_even;\n        if(eq_deeply($candidate->(4),\"\") || $candidate->(4)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),\"\") || $candidate->(6)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1) || $candidate->(8)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),1) || $candidate->(10)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),\"\") || $candidate->(11)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),1) || $candidate->(12)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13),\"\") || $candidate->(13)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16),1) || $candidate->(16)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_equal_to_sum_even(n int) bool {\n    return n%2 == 0 && n >= 8\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_equal_to_sum_even {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_79_decimal_to_binary",
    "language": "pl",
    "prompt": "sub decimal_to_binary {\n    my($decimal) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_79_decimal_to_binary.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&decimal_to_binary;\n        if(eq_deeply($candidate->(0),\"db0db\") || $candidate->(0)==\"db0db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(32),\"db100000db\") || $candidate->(32)==\"db100000db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(103),\"db1100111db\") || $candidate->(103)==\"db1100111db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15),\"db1111db\") || $candidate->(15)==\"db1111db\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc decimal_to_binary(decimal int) string {\n    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub decimal_to_binary {\n    my($decimal) = @_;\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "pl",
    "prompt": "sub simplify {\n    my($x, $n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&simplify;\n        if(eq_deeply($candidate->(\"1/5\", \"5/1\"),1) || $candidate->(\"1/5\", \"5/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/6\", \"2/1\"),\"\") || $candidate->(\"1/6\", \"2/1\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5/1\", \"3/1\"),1) || $candidate->(\"5/1\", \"3/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/10\", \"10/2\"),\"\") || $candidate->(\"7/10\", \"10/2\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/10\", \"50/10\"),1) || $candidate->(\"2/10\", \"50/10\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/2\", \"4/2\"),1) || $candidate->(\"7/2\", \"4/2\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"11/6\", \"6/1\"),1) || $candidate->(\"11/6\", \"6/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/3\", \"5/2\"),\"\") || $candidate->(\"2/3\", \"5/2\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"5/2\", \"3/5\"),\"\") || $candidate->(\"5/2\", \"3/5\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/4\", \"8/4\"),1) || $candidate->(\"2/4\", \"8/4\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/4\", \"4/2\"),1) || $candidate->(\"2/4\", \"4/2\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/5\", \"5/1\"),1) || $candidate->(\"1/5\", \"5/1\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/5\", \"1/5\"),\"\") || $candidate->(\"1/5\", \"1/5\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc simplify(x string, n string) bool {\n    var a, b, c, d int\n    fmt.Sscanf(x, \"%d/%d\", &a, &b)\n    fmt.Sscanf(n, \"%d/%d\", &c, &d)\n    numerator := a * c\n    denom := b * d\n    if float64(numerator)/float64(denom) == float64(int(numerator/denom)) {\n        return true\n    }\n    return false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub simplify {\n    my($x, $n) = @_;\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "pl",
    "prompt": "sub solve {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n        if(eq_deeply($candidate->(\"AsDf\"),\"aSdF\") || $candidate->(\"AsDf\")==\"aSdF\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1234\"),\"4321\") || $candidate->(\"1234\")==\"4321\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"AB\") || $candidate->(\"ab\")==\"AB\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#a@C\"),\"#A@c\") || $candidate->(\"#a@C\")==\"#A@c\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#AsdfW^45\"),\"#aSDFw^45\") || $candidate->(\"#AsdfW^45\")==\"#aSDFw^45\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#6@2\"),\"2@6#\") || $candidate->(\"#6@2\")==\"2@6#\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#$a^D\"),\"#$A^d\") || $candidate->(\"#$a^D\")==\"#$A^d\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#ccc\"),\"#CCC\") || $candidate->(\"#ccc\")==\"#CCC\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc solve(s string) string {\n\tflg := 0\n\tidx := 0\n\tnewStr := []rune(s)\n\tfor _, i := range s {\n\t\tif (i >= 'a' && i <= 'z') || (i >= 'A' && i <= 'Z') {\n\t\t\tnewStr[idx] = rune(i) ^ 32\n\t\t\tflg = 1\n\t\t}\n\t\tidx += 1\n\t}\n\tif flg == 0 {\n\t\tfor i, j := 0, len(newStr)-1; i < j; i, j = i+1, j-1 {\n\t\t\tnewStr[i], newStr[j] = newStr[j], newStr[i]\n\t\t}\n\t}\n\treturn string(newStr)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub solve {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "pl",
    "prompt": "sub right_angle_triangle {\n    my($a, $b, $c) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1) || $candidate->(3, 4, 5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\") || $candidate->(1, 2, 3)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1) || $candidate->(10, 6, 8)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\") || $candidate->(2, 2, 2)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1) || $candidate->(7, 24, 25)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\") || $candidate->(10, 5, 7)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1) || $candidate->(5, 12, 13)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1) || $candidate->(15, 8, 17)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1) || $candidate->(48, 55, 73)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\") || $candidate->(1, 1, 1)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\") || $candidate->(2, 2, 10)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc right_angle_triangle(a int, b int, c int) bool {\n    return a*a == b*b+c*c || b*b == a*a+c*c || c*c == a*a+b*b\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "pl",
    "prompt": "sub double_the_difference {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0) || $candidate->([])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25) || $candidate->([5.0, 4.0])==25) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0) || $candidate->([0.1, 0.2, 0.3])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0) || $candidate->([-10.0, -20.0, -30.0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0) || $candidate->([-1.0, -2.0, 8.0])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34) || $candidate->([0.2, 3.0, 5.0])==34) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165) || $candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0])==165) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage double_the_difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc double_the_difference(lst []float64) int {\n    sum := 0\n    for _, i := range lst {\n        if i > 0 && int(i)%2 != 0 && fmt.Sprintf(\"%f\", i)[len(fmt.Sprintf(\"%f\", i))-2] != '.' {\n            sum += int(i*i)\n        }\n    }\n    return sum\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub double_the_difference {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "pl",
    "prompt": "sub below_zero {\n    my($operations) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_zero;\n        if(eq_deeply($candidate->([]),\"\") || $candidate->([])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -3, 1, 2, -3]),\"\") || $candidate->([1, 2, -3, 1, 2, -3])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -4, 5, 6]),1) || $candidate->([1, 2, -4, 5, 6])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -4]),\"\") || $candidate->([1, -1, 2, -2, 5, -5, 4, -4])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -5]),1) || $candidate->([1, -1, 2, -2, 5, -5, 4, -5])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -2, 2, -2, 5, -5, 4, -4]),1) || $candidate->([1, -2, 2, -2, 5, -5, 4, -4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc below_zero(operations []int) bool {\n\tbalance := 0\n\n\tfor _, op := range operations {\n\t\tbalance += op\n\t\tif balance < 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub below_zero {\n    my($operations) = @_;\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "pl",
    "prompt": "sub greatest_common_divisor {\n    my($a, $b) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&greatest_common_divisor;\n        if(eq_deeply($candidate->(3, 7),1) || $candidate->(3, 7)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 15),5) || $candidate->(10, 15)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49, 14),7) || $candidate->(49, 14)==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(144, 60),12) || $candidate->(144, 60)==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage greatest_common_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0 {\n        a, b = b, a%b\n    }\n    return a\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub greatest_common_divisor {\n    my($a, $b) = @_;\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "pl",
    "prompt": "sub f {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(5),[1, 2, 6, 24, 15]) || $candidate->(5)==[1, 2, 6, 24, 15]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1, 2, 6, 24, 15, 720, 28]) || $candidate->(7)==[1, 2, 6, 24, 15, 720, 28]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1]) || $candidate->(1)==[1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1, 2, 6]) || $candidate->(3)==[1, 2, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc f(n int) []int {\n    ret := []int{}\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            x := 1\n            for j := 1; j <= i; j++ { x *= j }\n            ret = append(ret, x)\n        } else {\n            x := 0\n            for j := 1; j <= i; j++ { x += j }\n            ret = append(ret, x)\n        }\n    }\n    return ret\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub f {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "pl",
    "prompt": "sub monotonic {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1) || $candidate->([1, 2, 4, 10])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 20]),1) || $candidate->([1, 2, 4, 20])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\") || $candidate->([1, 20, 4, 10])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 0, -10]),1) || $candidate->([4, 1, 0, -10])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 1, 0]),1) || $candidate->([4, 1, 1, 0])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\") || $candidate->([1, 2, 3, 2, 5, 60])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1) || $candidate->([1, 2, 3, 4, 5, 60])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1) || $candidate->([9, 9, 9, 9])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc monotonic(l []int) bool {\n    isSorted := func(l []int, reverse bool) bool {\n        for i := 1; i < len(l); i++ {\n            if reverse {\n                if l[i-1] < l[i] {\n                    return false\n                }\n            } else {\n                if l[i-1] > l[i] {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    if isSorted(l, false) || isSorted(l, true) {\n        return true\n    }\n    return false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub monotonic {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "pl",
    "prompt": "sub by_length {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&by_length;\n        if(eq_deeply($candidate->([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]) || $candidate->([2, 1, 1, 4, 5, 8, 2, 3])==[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 55]),[\"One\"]) || $candidate->([1, -1, 55])==[\"One\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]) || $candidate->([1, -1, 3, 2])==[\"Three\", \"Two\", \"One\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]) || $candidate->([9, 4, 8])==[\"Nine\", \"Eight\", \"Four\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc by_length(arr []int) []string {\n    dic := map[int]string{\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr := make([]int, len(arr))\n    copy(sorted_arr, arr)\n    for i := 0; i < len(sorted_arr); i++ {\n        for j := i + 1; j < len(sorted_arr); j++ {\n            if sorted_arr[i] < sorted_arr[j] {\n                sorted_arr[i], sorted_arr[j] = sorted_arr[j], sorted_arr[i]\n            }\n        }\n    }\n    new_arr := []string{}\n    for _, val := range sorted_arr {\n        if word, ok := dic[val]; ok {\n            new_arr = append(new_arr, word)\n        }\n    }\n    return new_arr\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub by_length {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "pl",
    "prompt": "sub remove_vowels {\n    my($text) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_vowels;\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\nghijklm\"),\"bcdf\nghjklm\") || $candidate->(\"abcdef\nghijklm\")==\"bcdf\nghjklm\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"fedcba\"),\"fdcb\") || $candidate->(\"fedcba\")==\"fdcb\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"),\"\") || $candidate->(\"eeeee\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"acBAA\"),\"cB\") || $candidate->(\"acBAA\")==\"cB\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"EcBOO\"),\"cB\") || $candidate->(\"EcBOO\")==\"cB\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ybcd\"),\"ybcd\") || $candidate->(\"ybcd\")==\"ybcd\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc remove_vowels(text string) string {\n    result := \"\"\n    for _, s := range text {\n        if s != 'a' && s != 'e' && s != 'i' && s != 'o' && s != 'u' && s != 'A' && s != 'E' && s != 'I' && s != 'O' && s != 'U' {\n            result += string(s)\n        }\n    }\n    return result\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub remove_vowels {\n    my($text) = @_;\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "pl",
    "prompt": "sub correct_bracketing {\n    my($brackets) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1) || $candidate->(\"<>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1) || $candidate->(\"<<><>>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1) || $candidate->(\"<><><<><>><>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1) || $candidate->(\"<><><<<><><>><>><<><><<>>>\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\") || $candidate->(\"<<<><>>>>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\") || $candidate->(\"><<>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\") || $candidate->(\"<\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\") || $candidate->(\"<<<<\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\") || $candidate->(\">\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\") || $candidate->(\"<<>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\") || $candidate->(\"<><><<><>><>><<>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\") || $candidate->(\"<><><<><>><>>><>\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc correct_bracketing(brackets string) bool {\n\tdepth := 0\n\tfor _, b := range brackets {\n\t\tif b == '<' {\n\t\t\tdepth += 1\n\t\t} else {\n\t\t\tdepth -= 1\n\t\t}\n\t\tif depth < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn depth == 0\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub correct_bracketing {\n    my($brackets) = @_;\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "pl",
    "prompt": "sub rescale_to_unit {\n    my($numbers) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rescale_to_unit;\n        if(eq_deeply($candidate->([2.0, 49.9]),[0.0, 1.0]) || $candidate->([2.0, 49.9])==[0.0, 1.0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 49.9]),[1.0, 0.0]) || $candidate->([100.0, 49.9])==[1.0, 0.0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]) || $candidate->([1.0, 2.0, 3.0, 4.0, 5.0])==[0.0, 0.25, 0.5, 0.75, 1.0]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]) || $candidate->([2.0, 1.0, 5.0, 3.0, 4.0])==[0.25, 0.0, 1.0, 0.5, 0.75]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]) || $candidate->([12.0, 11.0, 15.0, 13.0, 14.0])==[0.25, 0.0, 1.0, 0.5, 0.75]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc rescale_to_unit(numbers []float64) []float64 {\n    minNumber := numbers[0]\n    maxNumber := numbers[0]\n\n    for _, x := range numbers {\n        if x < minNumber {\n            minNumber = x\n        }\n        if x > maxNumber {\n            maxNumber = x\n        }\n    }\n\n    result := make([]float64, len(numbers))\n    for i, x := range numbers {\n        result[i] = (x - minNumber) / (maxNumber - minNumber)\n    }\n\n    return result\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub rescale_to_unit {\n    my($numbers) = @_;\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "pl",
    "prompt": "sub intersection {\n    my($interval1, $interval2) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersection;\n        if(eq_deeply($candidate->([1, 2], [2, 3]),\"NO\") || $candidate->([1, 2], [2, 3])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1], [0, 4]),\"NO\") || $candidate->([-1, 1], [0, 4])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, -1], [-5, 5]),\"YES\") || $candidate->([-3, -1], [-5, 5])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, 2], [-4, 0]),\"YES\") || $candidate->([-2, 2], [-4, 0])==\"YES\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-11, 2], [-1, -1]),\"NO\") || $candidate->([-11, 2], [-1, -1])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [3, 5]),\"NO\") || $candidate->([1, 2], [3, 5])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [1, 2]),\"NO\") || $candidate->([1, 2], [1, 2])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, -2], [-3, -2]),\"NO\") || $candidate->([-2, -2], [-3, -2])==\"NO\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage intersection_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc intersection(interval1 []interface{}, interval2 []interface{}) string {\n    is_prime := func(num int) bool {\n        if num == 1 || num == 0 {\n            return false\n        }\n        if num == 2 {\n            return true\n        }\n        for i := 2; i < num; i++ {\n            if num%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    l := interval1[0].(int)\n    if interval2[0].(int) > l {\n        l = interval2[0].(int)\n    }\n\n    r := interval1[1].(int)\n    if interval2[1].(int) < r {\n        r = interval2[1].(int)\n    }\n\n    length := r - l\n    if length > 0 && is_prime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub intersection {\n    my($interval1, $interval2) = @_;\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "pl",
    "prompt": "sub hex_key {\n    my($num) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1) || $candidate->(\"AB\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2) || $candidate->(\"1077E\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4) || $candidate->(\"ABED1A33\")==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2) || $candidate->(\"2020\")==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6) || $candidate->(\"123456789ABCDEF0\")==6) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"),12) || $candidate->(\"112233445566778899AABBCCDDEEFF00\")==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc hex_key(num string) int {\n\tprimes := []rune{'2', '3', '5', '7', 'B', 'D'}\n\ttotal := 0\n\tfor _, c := range num {\n\t\tfor _, p := range primes {\n\t\t\tif c == p {\n\t\t\t\ttotal += 1\n\t\t\t}\n\t\t}\n\t}\n\treturn total\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub hex_key {\n    my($num) = @_;\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "pl",
    "prompt": "sub strange_sort_list {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strange_sort_list;\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 4, 2, 3]) || $candidate->([1, 2, 3, 4])==[1, 4, 2, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]) || $candidate->([5, 6, 7, 8, 9])==[5, 9, 6, 8, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]) || $candidate->([1, 2, 3, 4, 5])==[1, 5, 2, 4, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]) || $candidate->([5, 6, 7, 8, 9, 1])==[1, 9, 5, 8, 6, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 5, 5]),[5, 5, 5, 5]) || $candidate->([5, 5, 5, 5])==[5, 5, 5, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]) || $candidate->([1, 2, 3, 4, 5, 6, 7, 8])==[1, 8, 2, 7, 3, 6, 4, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]) || $candidate->([0, 2, 2, 2, 5, 5, -5, -5])==[-5, 5, -5, 5, 0, 2, 2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111111]),[111111]) || $candidate->([111111])==[111111]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc strange_sort_list(lst []int) []int {\n    res, switch_ := []int{}, true\n    for len(lst) > 0 {\n        if switch_ {\n            min := lst[0]\n            for _, v := range lst {\n                if v < min {\n                    min = v\n                }\n            }\n            res = append(res, min)\n        } else {\n            max := lst[0]\n            for _, v := range lst {\n                if v > max {\n                    max = v\n                }\n            }\n            res = append(res, max)\n        }\n        for i, v := range lst {\n            if v == res[len(res)-1] {\n                lst = append(lst[:i], lst[i+1:]...)\n                break\n            }\n        }\n        switch_ = !switch_\n    }\n    return res\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub strange_sort_list {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "pl",
    "prompt": "sub all_prefixes {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&all_prefixes;\n        if(eq_deeply($candidate->(\"\"),[]) || $candidate->(\"\")==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]) || $candidate->(\"asdfgh\")==[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"WWW\"),[\"W\", \"WW\", \"WWW\"]) || $candidate->(\"WWW\")==[\"W\", \"WW\", \"WWW\"]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc all_prefixes(myString string) []string {\n    var result []string\n\n    for i := 0; i < len(myString); i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub all_prefixes {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "pl",
    "prompt": "sub how_many_times {\n    my($string, $substring) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&how_many_times;\n        if(eq_deeply($candidate->(\"\", \"x\"),0) || $candidate->(\"\", \"x\")==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyxyxyx\", \"x\"),4) || $candidate->(\"xyxyxyx\", \"x\")==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"cacacacac\", \"cac\"),4) || $candidate->(\"cacacacac\", \"cac\")==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"john doe\", \"john\"),1) || $candidate->(\"john doe\", \"john\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc how_many_times(myString string, substring string) int {\n\ttimes := 0\n\n\tfor i := 0; i < len(myString)-len(substring)+1; i++ {\n\t\tif myString[i:i+len(substring)] == substring {\n\t\t\ttimes += 1\n\t\t}\n\t}\n\n\treturn times\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub how_many_times {\n    my($string, $substring) = @_;\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "pl",
    "prompt": "sub solution {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solution;\n        if(eq_deeply($candidate->([5, 8, 7, 1]),12) || $candidate->([5, 8, 7, 1])==12) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3, 3, 3, 3]),9) || $candidate->([3, 3, 3, 3, 3])==9) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30, 13, 24, 321]),0) || $candidate->([30, 13, 24, 321])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 9]),5) || $candidate->([5, 9])==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8]),0) || $candidate->([2, 4, 8])==0) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30, 13, 23, 32]),23) || $candidate->([30, 13, 23, 32])==23) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 13, 2, 9]),3) || $candidate->([3, 13, 2, 9])==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc solution(lst []int) int {\n    sum := 0\n    for i, x := range lst {\n        if i%2 == 0 && x%2 == 1 {\n            sum += x\n        }\n    }\n    return sum\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub solution {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "pl",
    "prompt": "sub is_sorted {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_sorted;\n        if(eq_deeply($candidate->([5]),1) || $candidate->([5])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1) || $candidate->([1, 2, 3, 4, 5])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5]),\"\") || $candidate->([1, 3, 2, 4, 5])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),1) || $candidate->([1, 2, 3, 4, 5, 6])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7]),1) || $candidate->([1, 2, 3, 4, 5, 6, 7])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, 7]),\"\") || $candidate->([1, 3, 2, 4, 5, 6, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1) || $candidate->([])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1) || $candidate->([1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),\"\") || $candidate->([3, 2, 1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 2, 3, 4]),\"\") || $candidate->([1, 2, 2, 2, 3, 4])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 3, 3, 4]),\"\") || $candidate->([1, 2, 3, 3, 3, 4])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4]),1) || $candidate->([1, 2, 2, 3, 3, 4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),1) || $candidate->([1, 2, 3, 4])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_sorted(lst []int) bool {\n    count_digit := make(map[int]int)\n    for _, i := range lst {\n        count_digit[i]++\n    }\n    for _, v := range count_digit {\n        if v > 2 {\n            return false\n        }\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i-1] > lst[i] {\n            return false\n        }\n    }\n    return true\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_sorted {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "pl",
    "prompt": "sub search {\n    my($lst) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&search;\n        if(eq_deeply($candidate->([5, 5, 5, 5, 1]),1) || $candidate->([5, 5, 5, 5, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 4, 1, 4, 4]),4) || $candidate->([4, 1, 4, 1, 4, 4])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3]),-1) || $candidate->([3, 3])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 8, 8, 8, 8, 8, 8]),8) || $candidate->([8, 8, 8, 8, 8, 8, 8, 8])==8) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 3, 2, 2]),2) || $candidate->([2, 3, 3, 2, 2])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1) || $candidate->([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 8, 2]),2) || $candidate->([3, 2, 8, 2])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1) || $candidate->([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 3, 6, 5, 6, 4]),-1) || $candidate->([8, 8, 3, 6, 5, 6, 4])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1) || $candidate->([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 9, 10, 1, 3]),1) || $candidate->([1, 9, 10, 1, 3])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5) || $candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10])==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1) || $candidate->([1])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4) || $candidate->([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2) || $candidate->([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1) || $candidate->([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4) || $candidate->([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4) || $candidate->([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7])==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2) || $candidate->([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1) || $candidate->([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),-1) || $candidate->([10])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2) || $candidate->([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2])==2) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1) || $candidate->([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1) || $candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 10, 10, 9, 2]),-1) || $candidate->([3, 10, 10, 9, 2])==-1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc search(lst []int) int {\n    max := 0\n    for _, i := range lst {\n        if i > max {\n            max = i\n        }\n    }\n\n    frq := make([]int, max+1)\n    for _, i := range lst {\n        frq[i]++\n    }\n\n    ans := -1\n    for i := 1; i < len(frq); i++ {\n        if frq[i] >= i {\n            ans = i\n        }\n    }\n\n    return ans\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub search {\n    my($lst) = @_;\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "pl",
    "prompt": "sub pluck {\n    my($arr) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pluck;\n        if(eq_deeply($candidate->([4, 2, 3]),[2, 1]) || $candidate->([4, 2, 3])==[2, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 1]) || $candidate->([1, 2, 3])==[2, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 0, 3, 0, 4, 2]),[0, 1]) || $candidate->([5, 0, 3, 0, 4, 2])==[0, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 0, 5, 3]),[0, 3]) || $candidate->([1, 2, 3, 0, 5, 3])==[0, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 8, 4, 8]),[4, 1]) || $candidate->([5, 4, 8, 4, 8])==[4, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 6, 7, 1]),[6, 1]) || $candidate->([7, 6, 7, 1])==[6, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 9, 7, 1]),[]) || $candidate->([7, 9, 7, 1])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc pluck(arr []int) []int {\n    if len(arr) == 0 { return []int{} }\n    evens := []int{}\n    for _, v := range arr {\n        if v%2 == 0 {\n            evens = append(evens, v)\n        }\n    }\n    if len(evens) == 0 { return []int{} }\n    min := evens[0]\n    for _, v := range evens {\n        if v < min {\n            min = v\n        }\n    }\n    for i, v := range arr {\n        if v == min {\n            return []int{min, i}\n        }\n    }\n    return []int{}\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub pluck {\n    my($arr) = @_;\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "pl",
    "prompt": "sub pairs_sum_to_zero {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pairs_sum_to_zero;\n        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\") || $candidate->([1, 3, 5, 0])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2, 1]),\"\") || $candidate->([1, 3, -2, 1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\") || $candidate->([1, 2, 3, 7])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 5, 7]),1) || $candidate->([2, 4, -5, 3, 5, 7])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\") || $candidate->([1])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 30]),1) || $candidate->([-3, 9, -1, 3, 2, 30])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 31]),1) || $candidate->([-3, 9, -1, 3, 2, 31])==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 30]),\"\") || $candidate->([-3, 9, -1, 4, 2, 30])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 31]),\"\") || $candidate->([-3, 9, -1, 4, 2, 31])==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc pairs_sum_to_zero(l []int) bool {\n    for i, l1 := range l {\n        for _, l2 := range l[i+1:] {\n            if l1+l2 == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub pairs_sum_to_zero {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "pl",
    "prompt": "sub get_positive {\n    my($l) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_positive;\n        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6]) || $candidate->([-1, -2, 4, 5, 6])==[4, 5, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]) || $candidate->([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])==[5, 3, 2, 3, 3, 9, 123, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2]),[]) || $candidate->([-1, -2])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]) || $candidate->([])==[]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc get_positive(l []int) []int {\n    var r []int\n    for _, e := range l {\n        if e > 0 {\n            r = append(r, e)\n        }\n    }\n    return r\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub get_positive {\n    my($l) = @_;\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "pl",
    "prompt": "sub is_nested {\n    my($string) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_nested;\n        if(eq_deeply($candidate->(\"[[]]\"),1) || $candidate->(\"[[]]\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]][[[[[]\"),\"\") || $candidate->(\"[]]]]]]][[[[[]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[][]\"),\"\") || $candidate->(\"[][]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]\"),\"\") || $candidate->(\"[]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[]]]]\"),1) || $candidate->(\"[[[[]]]]\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]]]]]\"),\"\") || $candidate->(\"[]]]]]]]]]]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[][][[]]\"),1) || $candidate->(\"[][][[]]\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]\"),\"\") || $candidate->(\"[[]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]\"),\"\") || $candidate->(\"[]]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]][[\"),1) || $candidate->(\"[[]][[\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[][]]\"),1) || $candidate->(\"[[][]]\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),\"\") || $candidate->(\"\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[[[[[\"),\"\") || $candidate->(\"[[[[[[[[\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"]]]]]]]]\"),\"\") || $candidate->(\"]]]]]]]]\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_nested(myString string) bool {\n    opening_bracket_index := []int{}\n    closing_bracket_index := []int{}\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '[' {\n            opening_bracket_index = append(opening_bracket_index, i)\n        } else {\n            closing_bracket_index = append(closing_bracket_index, i)\n        }\n    }\n    for i, j := 0, len(closing_bracket_index)-1; i < j; i, j = i+1, j-1 {\n        closing_bracket_index[i], closing_bracket_index[j] = closing_bracket_index[j], closing_bracket_index[i]\n    }\n    cnt := 0\n    i := 0\n    l := len(closing_bracket_index)\n    for _, idx := range opening_bracket_index {\n        if i < l && idx < closing_bracket_index[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_nested {\n    my($string) = @_;\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "pl",
    "prompt": "sub is_palindrome {\n    my($text) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_palindrome;\n        if(eq_deeply($candidate->(\"\"),1) || $candidate->(\"\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aba\"),1) || $candidate->(\"aba\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaaaa\"),1) || $candidate->(\"aaaaa\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"zbcd\"),\"\") || $candidate->(\"zbcd\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyx\"),1) || $candidate->(\"xywyx\")==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyz\"),\"\") || $candidate->(\"xywyz\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywzx\"),\"\") || $candidate->(\"xywzx\")==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_palindrome(text string) bool {\n\tfor i := 0; i < len(text)/2; i++ {\n\t\tif text[i] != text[len(text)-1-i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_palindrome {\n    my($text) = @_;\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "pl",
    "prompt": "sub factorize {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&factorize;\n        if(eq_deeply($candidate->(2),[2]) || $candidate->(2)==[2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[2, 2]) || $candidate->(4)==[2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[2, 2, 2]) || $candidate->(8)==[2, 2, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(57),[3, 19]) || $candidate->(57)==[3, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3249),[3, 3, 19, 19]) || $candidate->(3249)==[3, 3, 19, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(185193),[3, 3, 3, 19, 19, 19]) || $candidate->(185193)==[3, 3, 3, 19, 19, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20577),[3, 19, 19, 19]) || $candidate->(20577)==[3, 19, 19, 19]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),[2, 3, 3]) || $candidate->(18)==[2, 3, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc factorize(n int) []int {\n    fact := make([]int, 0)\n    i := 2\n\n    for i <= n {\n        if n%i == 0 {\n            fact = append(fact, i)\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n\n    return fact\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub factorize {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "pl",
    "prompt": "sub largest_prime_factor {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5) || $candidate->(15)==5) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3) || $candidate->(27)==3) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7) || $candidate->(63)==7) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11) || $candidate->(330)==11) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29) || $candidate->(13195)==29) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc largest_prime_factor(n int) int {\n    is_prime := func(k int) bool {\n        if k < 2 {\n            return false\n        }\n        for i := 2; i < k; i++ {\n            if k%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    largest := 1\n    for j := 2; j <= n; j++ {\n        if n%j == 0 && is_prime(j) {\n            largest = j\n        }\n    }\n    return largest\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub largest_prime_factor {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "pl",
    "prompt": "sub get_max_triples {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_max_triples;\n        if(eq_deeply($candidate->(5),1) || $candidate->(5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),4) || $candidate->(6)==4) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),36) || $candidate->(10)==36) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),53361) || $candidate->(100)==53361) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc get_max_triples(n int) int {\n\tA := make([]int, n)\n\tfor i := 1; i <= n; i++ {\n\t\tA[i-1] = i*i - i + 1\n\t}\n\tans := 0\n\tfor i := 0; i < n; i++ {\n\t\tfor j := i+1; j < n; j++ {\n\t\t\tfor k := j+1; k < n; k++ {\n\t\t\t\tif (A[i]+A[j]+A[k])%3 == 0 {\n\t\t\t\t\tans += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ans\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub get_max_triples {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "pl",
    "prompt": "sub solve {\n    my($N) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n        if(eq_deeply($candidate->(1000),\"1\") || $candidate->(1000)==\"1\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(150),\"110\") || $candidate->(150)==\"110\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(147),\"1100\") || $candidate->(147)==\"1100\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(333),\"1001\") || $candidate->(333)==\"1001\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(963),\"10010\") || $candidate->(963)==\"10010\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc solve(N int) string {\n    sum := 0\n    for N > 0 {\n        sum += N % 10\n        N /= 10\n    }\n    return fmt.Sprintf(\"%b\", sum)\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub solve {\n    my($N) = @_;\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "pl",
    "prompt": "sub minPath {\n    my($grid, $k) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minPath;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]) || $candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)==[1, 2, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]) || $candidate->([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)==[1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]) || $candidate->([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4)==[1, 2, 1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]) || $candidate->([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)==[1, 10, 1, 10, 1, 10, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]) || $candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)==[1, 7, 1, 7, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]) || $candidate->([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9)==[1, 6, 1, 6, 1, 6, 1, 6, 1]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]) || $candidate->([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12)==[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]) || $candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8)==[1, 3, 1, 3, 1, 3, 1, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]) || $candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8)==[1, 5, 1, 5, 1, 5, 1, 5]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) || $candidate->([[1, 2], [3, 4]], 10)==[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]) || $candidate->([[1, 3], [3, 2]], 10)==[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc minPath(grid [][]int, k int) []int {\n\tn := len(grid)\n\tval := n*n + 1\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < n; j++ {\n\t\t\tif grid[i][j] == 1 {\n\t\t\t\ttemp := []int{}\n\t\t\t\tif i != 0 {\n\t\t\t\t\ttemp = append(temp, grid[i-1][j])\n\t\t\t\t}\n\t\t\t\tif j != 0 {\n\t\t\t\t\ttemp = append(temp, grid[i][j-1])\n\t\t\t\t}\n\t\t\t\tif i != n-1 {\n\t\t\t\t\ttemp = append(temp, grid[i+1][j])\n\t\t\t\t}\n\t\t\t\tif j != n-1 {\n\t\t\t\t\ttemp = append(temp, grid[i][j+1])\n\t\t\t\t}\n\t\t\t\tfor _, t := range temp {\n\t\t\t\t\tif t < val {\n\t\t\t\t\t\tval = t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tans := make([]int, k)\n\tfor i := 0; i < k; i++ {\n\t\tif i%2 == 0 {\n\t\t\tans[i] = 1\n\t\t} else {\n\t\t\tans[i] = val\n\t\t}\n\t}\n\treturn ans\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub minPath {\n    my($grid, $k) = @_;\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "pl",
    "prompt": "sub encrypt {\n    my($s) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encrypt;\n        if(eq_deeply($candidate->(\"hi\"),\"lm\") || $candidate->(\"hi\")==\"lm\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfghjkl\"),\"ewhjklnop\") || $candidate->(\"asdfghjkl\")==\"ewhjklnop\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"gf\"),\"kj\") || $candidate->(\"gf\")==\"kj\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"et\"),\"ix\") || $candidate->(\"et\")==\"ix\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"faewfawefaewg\"),\"jeiajeaijeiak\") || $candidate->(\"faewfawefaewg\")==\"jeiajeaijeiak\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"hellomyfriend\"),\"lippsqcjvmirh\") || $candidate->(\"hellomyfriend\")==\"lippsqcjvmirh\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") || $candidate->(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\"),\"e\") || $candidate->(\"a\")==\"e\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc encrypt(s string) string {\n\td := \"abcdefghijklmnopqrstuvwxyz\"\n\tout := \"\"\n\n\tfor _, c := range s {\n\t\tif i := int(c - 'a'); 0 <= i && i < 26 {\n\t\t\tout += string(d[(i+2*2)%26])\n\t\t} else {\n\t\t\tout += string(c)\n\t\t}\n\t}\n\n\treturn out\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub encrypt {\n    my($s) = @_;\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "pl",
    "prompt": "sub make_a_pile {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_a_pile;\n        if(eq_deeply($candidate->(3),[3, 5, 7]) || $candidate->(3)==[3, 5, 7]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[4, 6, 8, 10]) || $candidate->(4)==[4, 6, 8, 10]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[5, 7, 9, 11, 13]) || $candidate->(5)==[5, 7, 9, 11, 13]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[6, 8, 10, 12, 14, 16]) || $candidate->(6)==[6, 8, 10, 12, 14, 16]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[8, 10, 12, 14, 16, 18, 20, 22]) || $candidate->(8)==[8, 10, 12, 14, 16, 18, 20, 22]) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc make_a_pile(n int) []int {\n    res := make([]int, n)\n    for i := 0; i < n; i++ {\n        res[i] = n + 2*i\n    }\n    return res\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub make_a_pile {\n    my($n) = @_;\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "pl",
    "prompt": "sub is_prime {\n    my($n) = @_;\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_prime;\n        if(eq_deeply($candidate->(6),\"\") || $candidate->(6)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(101),1) || $candidate->(101)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1) || $candidate->(11)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13441),1) || $candidate->(13441)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(61),1) || $candidate->(61)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"\") || $candidate->(4)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"\") || $candidate->(1)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),1) || $candidate->(5)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1) || $candidate->(11)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17),1) || $candidate->(17)==1) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(85),\"\") || $candidate->(85)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(77),\"\") || $candidate->(77)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(255379),\"\") || $candidate->(255379)==\"\") {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
    "stop_tokens": [
      "\nsub",
      "\n#",
      "\n}"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Go program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Perl.\n\n### Go version\n\npackage is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc is_prime(n int) bool {\n\tif n < 2 {\n\t\treturn false\n\t}\n\n\tfor k := 2; k < n; k++ {\n\t\tif n%k == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### Perl version\n\nsub is_prime {\n    my($n) = @_;\n"
  }
]