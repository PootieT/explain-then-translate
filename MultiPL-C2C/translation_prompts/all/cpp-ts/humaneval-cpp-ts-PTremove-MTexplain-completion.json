[
  {
    "name": "HumanEval_61_correct_bracketing",
    "language": "ts",
    "prompt": "function correct_bracketing(brackets: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_61_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool correct_bracketing(std::string brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction correct_bracketing(brackets: string): boolean {\n"
  },
  {
    "name": "HumanEval_45_triangle_area",
    "language": "ts",
    "prompt": "function triangle_area(a: number, h: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_45_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(5, 3),7.5);\n  assert.deepEqual(candidate(2, 2),2.0);\n  assert.deepEqual(candidate(10, 8),40.0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat triangle_area(long a, long h) {\n    return a * h / 2.0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction triangle_area(a: number, h: number): number {\n"
  },
  {
    "name": "HumanEval_139_special_factorial",
    "language": "ts",
    "prompt": "function special_factorial(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_139_special_factorial.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong special_factorial(long n) {\n    long fact_i = 1;\n    long special_fact = 1;\n    for(long i = 1; i <= n; i++) {\n        fact_i *= i;\n        special_fact *= fact_i;\n    }\n    return special_fact;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction special_factorial(n: number): number {\n"
  },
  {
    "name": "HumanEval_136_largest_smallest_integers",
    "language": "ts",
    "prompt": "function largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_136_largest_smallest_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6, 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3, 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n    std::optional<long> smallest;\n    std::optional<long> largest;\n    for (auto i : lst) {\n        if (i < 0 && (!smallest || i > *smallest)) {\n            smallest = i;\n        }\n        if (i > 0 && (!largest || i < *largest)) {\n            largest = i;\n        }\n    }\n    return std::make_tuple(smallest, largest);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n"
  },
  {
    "name": "HumanEval_109_move_one_ball",
    "language": "ts",
    "prompt": "function move_one_ball(arr: number[]): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_109_move_one_ball.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_one_ball;\n  assert.deepEqual(candidate([3, 4, 5, 1, 2]),true);\n  assert.deepEqual(candidate([3, 5, 10, 1, 2]),true);\n  assert.deepEqual(candidate([4, 3, 1, 2]),false);\n  assert.deepEqual(candidate([3, 5, 4, 1, 2]),false);\n  assert.deepEqual(candidate([]),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nbool move_one_ball(std::vector<long> arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    std::vector<long> sorted_array = arr;\n    std::sort(sorted_array.begin(), sorted_array.end());\n    std::vector<long> my_arr;\n    long min_value = *std::min_element(arr.begin(), arr.end());\n    long min_index = std::find(arr.begin(), arr.end(), min_value) - arr.begin();\n    my_arr.insert(my_arr.end(), arr.begin() + min_index, arr.end());\n    my_arr.insert(my_arr.end(), arr.begin(), arr.begin() + min_index);\n    return my_arr == sorted_array;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction move_one_ball(arr: number[]): boolean {\n"
  },
  {
    "name": "HumanEval_131_digits",
    "language": "ts",
    "prompt": "function digits(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_131_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n  assert.deepEqual(candidate(2468),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong digits(long n) {\n    long product = 1;\n    int odd_count = 0;\n    for (char digit : std::to_string(n)) {\n        int int_digit = digit - '0';\n        if (int_digit % 2 == 1) {\n            product *= int_digit;\n            odd_count++;\n        }\n    }\n    return odd_count == 0 ? 0 : product;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction digits(n: number): number {\n"
  },
  {
    "name": "HumanEval_46_fib4",
    "language": "ts",
    "prompt": "function fib4(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_46_fib4.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n  assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong fib4(long n) {\n    std::vector<long> results = {0, 0, 2, 0};\n    if (n < 4) {\n        return results[n];\n    }\n    for (long i = 4; i <= n; i++) {\n        long next = results[0] + results[1] + results[2] + results[3];\n        results.erase(results.begin());\n        results.push_back(next);\n    }\n    return results[3];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction fib4(n: number): number {\n"
  },
  {
    "name": "HumanEval_37_sort_even",
    "language": "ts",
    "prompt": "function sort_even(l: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_37_sort_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_even;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]),[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n  assert.deepEqual(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]),[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> sort_even(std::vector<long> l) {\n    std::vector<long> evens;\n    for(int i=0;i<l.size();i+=2) evens.push_back(l[i]);\n    std::vector<long> odds;\n    for(int i=1;i<l.size();i+=2) odds.push_back(l[i]);\n    std::sort(evens.begin(), evens.end());\n    std::vector<long> ans;\n    for(int i=0;i<odds.size();i++) {\n        ans.push_back(evens[i]);\n        ans.push_back(odds[i]);\n    }\n    if(evens.size() > odds.size()) ans.push_back(evens[evens.size()-1]);\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction sort_even(l: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_145_order_by_points",
    "language": "ts",
    "prompt": "function order_by_points(nums: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_145_order_by_points.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0, 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<long> order_by_points(std::vector<long> nums) {\n    auto digits_sum = [](long n) -> long {\n        long neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        std::stringstream ss;\n        ss << n;\n        std::string s = ss.str();\n        std::vector<long> v;\n        for (auto c : s) {\n            v.push_back(c - '0');\n        }\n        v[0] = v[0] * neg;\n        return std::accumulate(v.begin(), v.end(), 0);\n    };\n    std::sort(nums.begin(), nums.end(), [&](long a, long b) {\n        return digits_sum(a) < digits_sum(b);\n    });\n    return nums;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction order_by_points(nums: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_80_is_happy",
    "language": "ts",
    "prompt": "function is_happy(s: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_80_is_happy.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_happy(std::string s) {\n    if (s.size() < 3) {\n      return false;\n    }\n\n    for (int i = 0; i < s.size() - 2; i++) {\n      if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2]) {\n        return false;\n      }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction is_happy(s: string): boolean {\n"
  },
  {
    "name": "HumanEval_65_circular_shift",
    "language": "ts",
    "prompt": "function circular_shift(x: number, shift: number): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_65_circular_shift.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = circular_shift;\n  assert.deepEqual(candidate(100, 2),\"001\");\n  assert.deepEqual(candidate(12, 2),\"12\");\n  assert.deepEqual(candidate(97, 8),\"79\");\n  assert.deepEqual(candidate(12, 1),\"21\");\n  assert.deepEqual(candidate(11, 101),\"11\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n    if (shift > s.size()) {\n        return std::string(s.rbegin(), s.rend());\n    } else {\n        return s.substr(s.size() - shift) + s.substr(0, s.size() - shift);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction circular_shift(x: number, shift: number): string {\n"
  },
  {
    "name": "HumanEval_115_max_fill",
    "language": "ts",
    "prompt": "function max_fill(grid: number[][], capacity: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_115_max_fill.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0, 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n    long sum = 0;\n    for (auto arr : grid) {\n        sum += ceil(std::accumulate(arr.begin(), arr.end(), 0.0) / capacity);\n    }\n    return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction max_fill(grid: number[][], capacity: number): number {\n"
  },
  {
    "name": "HumanEval_0_has_close_elements",
    "language": "ts",
    "prompt": "function has_close_elements(numbers: number[], threshold: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_0_has_close_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n    int n = numbers.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i != j) {\n                float distance = abs(numbers[i] - numbers[j]);\n                if (distance < threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction has_close_elements(numbers: number[], threshold: number): boolean {\n"
  },
  {
    "name": "HumanEval_150_x_or_y",
    "language": "ts",
    "prompt": "function x_or_y(n: number, x: number, y: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_150_x_or_y.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = x_or_y;\n  assert.deepEqual(candidate(7, 34, 12),34);\n  assert.deepEqual(candidate(15, 8, 5),5);\n  assert.deepEqual(candidate(3, 33, 5212),33);\n  assert.deepEqual(candidate(1259, 3, 52),3);\n  assert.deepEqual(candidate(7919, -1, 12),-1);\n  assert.deepEqual(candidate(3609, 1245, 583),583);\n  assert.deepEqual(candidate(91, 56, 129),129);\n  assert.deepEqual(candidate(6, 34, 1234),1234);\n  assert.deepEqual(candidate(1, 2, 0),0);\n  assert.deepEqual(candidate(2, 2, 0),2);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong x_or_y(long n, long x, long y) {\n    if (n == 1) {\n        return y;\n    }\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return y;\n            break;\n        }\n    }\n    return x;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction x_or_y(n: number, x: number, y: number): number {\n"
  },
  {
    "name": "HumanEval_146_specialFilter",
    "language": "ts",
    "prompt": "function specialFilter(nums: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_146_specialFilter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = specialFilter;\n  assert.deepEqual(candidate([5, -2, 1, -5]),0);\n  assert.deepEqual(candidate([15, -73, 14, -15]),1);\n  assert.deepEqual(candidate([33, -2, -3, 45, 21, 109]),2);\n  assert.deepEqual(candidate([43, -12, 93, 125, 121, 109]),4);\n  assert.deepEqual(candidate([71, -2, -33, 75, 21, 19]),3);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([]),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong specialFilter(std::vector<long> nums) {\n    long count = 0;\n    for (auto num: nums) {\n        if (num > 10) {\n            std::string number_as_string = std::to_string(num);\n            if (number_as_string.front() % 2 == 1 && number_as_string.back() % 2 == 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction specialFilter(nums: number[]): number {\n"
  },
  {
    "name": "HumanEval_17_parse_music",
    "language": "ts",
    "prompt": "function parse_music(music_string: string): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_17_parse_music.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> parse_music(std::string music_string) {\n  std::map<std::string, long> note_map = {{\"o\", 4}, {\"o|\", 2}, {\".|\", 1}};\n  std::vector<long> res;\n  std::istringstream iss(music_string);\n  std::string note;\n  while (iss >> note) {\n    if (note_map.count(note)) {\n      res.push_back(note_map[note]);\n    }\n  }\n  return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction parse_music(music_string: string): number[] {\n"
  },
  {
    "name": "HumanEval_125_split_words",
    "language": "ts",
    "prompt": "function split_words(txt: string): string[]| number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_125_split_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nUnion_std_vector_std_string__long split_words(std::string txt) {\n    if (txt.find(\" \") != std::string::npos) {\n        std::vector<std::string> result;\n        std::stringstream ss(txt);\n        std::string word;\n        while (ss >> word) {\n            result.push_back(word);\n        }\n        return result;\n    } else if (txt.find(\",\") != std::string::npos) {\n        std::vector<std::string> result;\n        std::stringstream ss(txt);\n        std::string word;\n        while (getline(ss, word, ',')) {\n            result.push_back(word);\n        }\n        return result;\n    } else {\n        long count = 0;\n        for (char c : txt) {\n            if (islower(c) && c % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction split_words(txt: string): string[]| number {\n"
  },
  {
    "name": "HumanEval_16_count_distinct_characters",
    "language": "ts",
    "prompt": "function count_distinct_characters(string: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_16_count_distinct_characters.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"Jerry jERRY JeRRRY\"),5);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong count_distinct_characters(std::string string) {\n    std::set<char> s;\n    for (auto c : string) {\n        s.insert(tolower(c));\n    }\n    return s.size();\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction count_distinct_characters(string: string): number {\n"
  },
  {
    "name": "HumanEval_66_digitSum",
    "language": "ts",
    "prompt": "function digitSum(s: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_66_digitSum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = digitSum;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"abAB\"),131);\n  assert.deepEqual(candidate(\"abcCd\"),67);\n  assert.deepEqual(candidate(\"helloE\"),69);\n  assert.deepEqual(candidate(\"woArBld\"),131);\n  assert.deepEqual(candidate(\"aAaaaXa\"),153);\n  assert.deepEqual(candidate(\" How are yOu?\"),151);\n  assert.deepEqual(candidate(\"You arE Very Smart\"),327);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong digitSum(std::string s) {\n    if (s == \"\") return 0;\n    long ans = 0;\n    for (char c : s) {\n        if (isupper(c)) ans += c;\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction digitSum(s: string): number {\n"
  },
  {
    "name": "HumanEval_142_sum_squares",
    "language": "ts",
    "prompt": "function sum_squares(lst: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_142_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1, 2, 3]),6);\n  assert.deepEqual(candidate([1, 4, 9]),14);\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]),9);\n  assert.deepEqual(candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]),-3);\n  assert.deepEqual(candidate([0]),0);\n  assert.deepEqual(candidate([-1, -5, 2, -1, -5]),-126);\n  assert.deepEqual(candidate([-56, -99, 1, 0, -2]),3030);\n  assert.deepEqual(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]),0);\n  assert.deepEqual(candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]),-14196);\n  assert.deepEqual(candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),-1448);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong sum_squares(std::vector<long> lst) {\n    long result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction sum_squares(lst: number[]): number {\n"
  },
  {
    "name": "HumanEval_96_count_up_to",
    "language": "ts",
    "prompt": "function count_up_to(n: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_96_count_up_to.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_up_to;\n  assert.deepEqual(candidate(5),[2, 3]);\n  assert.deepEqual(candidate(6),[2, 3, 5]);\n  assert.deepEqual(candidate(7),[2, 3, 5]);\n  assert.deepEqual(candidate(10),[2, 3, 5, 7]);\n  assert.deepEqual(candidate(0),[]);\n  assert.deepEqual(candidate(22),[2, 3, 5, 7, 11, 13, 17, 19]);\n  assert.deepEqual(candidate(1),[]);\n  assert.deepEqual(candidate(18),[2, 3, 5, 7, 11, 13, 17]);\n  assert.deepEqual(candidate(47),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]);\n  assert.deepEqual(candidate(101),[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    for (long i = 2; i < n; i++) {\n        bool is_prime = true;\n        for (long j = 2; j < i; j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction count_up_to(n: number): number[] {\n"
  },
  {
    "name": "HumanEval_133_sum_squares",
    "language": "ts",
    "prompt": "function sum_squares(lst: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_133_sum_squares.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4, 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0, 1.0, 15.0, 2.0]),10230);\n  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4, 17.9, 18.9, 19.9]),1086);\n  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong sum_squares(std::vector<float> lst) {\n    long squared = 0;\n    for (auto i : lst) {\n        squared += std::ceil(i) * std::ceil(i);\n    }\n    return squared;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction sum_squares(lst: number[]): number {\n"
  },
  {
    "name": "HumanEval_34_unique",
    "language": "ts",
    "prompt": "function unique(l: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_34_unique.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique;\n  assert.deepEqual(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end()); l.erase(std::unique(l.begin(), l.end()), l.end()); return l;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction unique(l: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_55_fib",
    "language": "ts",
    "prompt": "function fib(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_55_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong fib(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction fib(n: number): number {\n"
  },
  {
    "name": "HumanEval_36_fizz_buzz",
    "language": "ts",
    "prompt": "function fizz_buzz(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_36_fizz_buzz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong fizz_buzz(long n) {\n    std::vector<long> ns;\n    for (long i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            ns.push_back(i);\n        }\n    }\n    std::stringstream ss;\n    for (auto i : ns) {\n        ss << i;\n    }\n    std::string s = ss.str();\n    long ans = 0;\n    for (auto c : s) {\n        ans += (c == '7');\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction fizz_buzz(n: number): number {\n"
  },
  {
    "name": "HumanEval_153_Strongest_Extension",
    "language": "ts",
    "prompt": "function Strongest_Extension(class_name: string, extensions: string[]): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_153_Strongest_Extension.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\");\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\n    std::string strong = extensions[0];\n    int my_val = std::count_if(strong.begin(), strong.end(), [](char c){return std::isupper(c);}) - std::count_if(strong.begin(), strong.end(), [](char c){return std::islower(c);});\n    for (std::string s : extensions) {\n        int val = std::count_if(s.begin(), s.end(), [](char c){return std::isupper(c);}) - std::count_if(s.begin(), s.end(), [](char c){return std::islower(c);});\n        if (val > my_val) {\n            strong = s;\n            my_val = val;\n        }\n    }\n    std::string ans = class_name + \".\" + strong;\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction Strongest_Extension(class_name: string, extensions: string[]): string {\n"
  },
  {
    "name": "HumanEval_20_find_closest_elements",
    "language": "ts",
    "prompt": "function find_closest_elements(numbers: number[]): [number, number] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_20_find_closest_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n    std::tuple<float, float> closest_pair;\n    float distance = -1;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i+1; j < numbers.size(); j++) {\n            float new_distance = std::abs(numbers[i] - numbers[j]);\n            if (distance == -1 || new_distance < distance) {\n                distance = new_distance;\n                closest_pair = std::make_tuple(std::min(numbers[i], numbers[j]), std::max(numbers[i], numbers[j]));\n            }\n        }\n    }\n    return closest_pair;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction find_closest_elements(numbers: number[]): [number, number] {\n"
  },
  {
    "name": "HumanEval_124_valid_date",
    "language": "ts",
    "prompt": "function valid_date(date: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_124_valid_date.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nbool valid_date(std::string date) {\n    try {\n        date = date.substr(0, date.find(' '));\n        int month, day, year;\n        sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n            return false;\n        }\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n            return false;\n        }\n        if (month == 2 && (day < 1 || day > 29)) {\n            return false;\n        }\n    } catch (...) {\n        return false;\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction valid_date(date: string): boolean {\n"
  },
  {
    "name": "HumanEval_53_add",
    "language": "ts",
    "prompt": "function add(x: number, y: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_53_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate(0, 1),1);\n  assert.deepEqual(candidate(1, 0),1);\n  assert.deepEqual(candidate(2, 3),5);\n  assert.deepEqual(candidate(5, 7),12);\n  assert.deepEqual(candidate(7, 5),12);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong add(long x, long y) {\n    return x + y;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction add(x: number, y: number): number {\n"
  },
  {
    "name": "HumanEval_40_triples_sum_to_zero",
    "language": "ts",
    "prompt": "function triples_sum_to_zero(l: number[]): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_40_triples_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triples_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, 5, -1]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),true);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([1, 2, 5, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([1, 3, 5, -100]),false);\n  assert.deepEqual(candidate([100, 3, 5, -100]),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool triples_sum_to_zero(std::vector<long> l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction triples_sum_to_zero(l: number[]): boolean {\n"
  },
  {
    "name": "HumanEval_24_largest_divisor",
    "language": "ts",
    "prompt": "function largest_divisor(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_24_largest_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_divisor;\n  assert.deepEqual(candidate(3),1);\n  assert.deepEqual(candidate(7),1);\n  assert.deepEqual(candidate(10),5);\n  assert.deepEqual(candidate(100),50);\n  assert.deepEqual(candidate(49),7);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong largest_divisor(long n) {\n    for(long i=n-1;i>=1;i--) {\n        if(n%i==0) {\n            return i;\n        }\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction largest_divisor(n: number): number {\n"
  },
  {
    "name": "HumanEval_19_sort_numbers",
    "language": "ts",
    "prompt": "function sort_numbers(numbers: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_19_sort_numbers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string sort_numbers(std::string numbers) {\n    std::map<std::string, int> value_map = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::vector<std::string> nums;\n    std::stringstream ss(numbers);\n    std::string num;\n    while (ss >> num) {\n        nums.push_back(num);\n    }\n    std::sort(nums.begin(), nums.end(), [&](std::string a, std::string b) {\n        return value_map[a] < value_map[b];\n    });\n    std::string res;\n    for (auto& num : nums) {\n        res += num + \" \";\n    }\n    res.pop_back();\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction sort_numbers(numbers: string): string {\n"
  },
  {
    "name": "HumanEval_73_smallest_change",
    "language": "ts",
    "prompt": "function smallest_change(arr: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_73_smallest_change.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = smallest_change;\n  assert.deepEqual(candidate([1, 2, 3, 5, 4, 7, 9, 6]),4);\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 2]),1);\n  assert.deepEqual(candidate([1, 4, 2]),1);\n  assert.deepEqual(candidate([1, 4, 4, 2]),1);\n  assert.deepEqual(candidate([1, 2, 3, 2, 1]),0);\n  assert.deepEqual(candidate([3, 1, 1, 3]),0);\n  assert.deepEqual(candidate([1]),0);\n  assert.deepEqual(candidate([0, 1]),1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong smallest_change(std::vector<long> arr) {\n    long ans = 0;\n    for (long i = 0; i < arr.size() / 2; i++) {\n        if (arr[i] != arr[arr.size() - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction smallest_change(arr: number[]): number {\n"
  },
  {
    "name": "HumanEval_52_below_threshold",
    "language": "ts",
    "prompt": "function below_threshold(l: number[], t: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_52_below_threshold.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = below_threshold;\n  assert.deepEqual(candidate([1, 2, 4, 10], 100),true);\n  assert.deepEqual(candidate([1, 20, 4, 10], 5),false);\n  assert.deepEqual(candidate([1, 20, 4, 10], 21),true);\n  assert.deepEqual(candidate([1, 20, 4, 10], 22),true);\n  assert.deepEqual(candidate([1, 8, 4, 10], 11),true);\n  assert.deepEqual(candidate([1, 8, 4, 10], 10),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool below_threshold(std::vector<long> l, long t) {\n    for (auto e: l) {\n        if (e >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction below_threshold(l: number[], t: number): boolean {\n"
  },
  {
    "name": "HumanEval_128_prod_signs",
    "language": "ts",
    "prompt": "function prod_signs(arr: number[]): number | undefined {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_128_prod_signs.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1, 1, 1, 0]),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) return std::nullopt;\n    long prod = 0;\n    auto neg_count = std::count_if(arr.begin(), arr.end(), [](long x){return x < 0;});\n    if (std::find(arr.begin(), arr.end(), 0) != arr.end()) prod = 0;\n    else prod = pow(-1, neg_count);\n    long sum = 0;\n    for (auto i : arr) sum += std::abs(i);\n    return prod * sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction prod_signs(arr: number[]): number | undefined {\n"
  },
  {
    "name": "HumanEval_49_modp",
    "language": "ts",
    "prompt": "function modp(n: number, p: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_49_modp.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong modp(long n, long p) {\n    long ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (2 * ret) % p;\n    }\n    return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction modp(n: number, p: number): number {\n"
  },
  {
    "name": "HumanEval_98_count_upper",
    "language": "ts",
    "prompt": "function count_upper(s: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_98_count_upper.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"EEEE\"),2);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong count_upper(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.size(); i += 2) {\n        if (std::string(\"AEIOU\").find(s[i]) != std::string::npos) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction count_upper(s: string): number {\n"
  },
  {
    "name": "HumanEval_97_multiply",
    "language": "ts",
    "prompt": "function multiply(a: number, b: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_97_multiply.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19, 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14, -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17, 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0, 0),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong multiply(long a, long b) {\n    return abs(a % 10) * abs(b % 10);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction multiply(a: number, b: number): number {\n"
  },
  {
    "name": "HumanEval_104_unique_digits",
    "language": "ts",
    "prompt": "function unique_digits(x: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_104_unique_digits.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> odd_digit_elements;\n    for (auto i : x) {\n        bool is_odd = true;\n        for (auto c : std::to_string(i)) {\n            if (c % 2 == 0) {\n                is_odd = false;\n                break;\n            }\n        }\n        if (is_odd) {\n            odd_digit_elements.push_back(i);\n        }\n    }\n    std::sort(odd_digit_elements.begin(), odd_digit_elements.end());\n    return odd_digit_elements;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction unique_digits(x: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_72_will_it_fly",
    "language": "ts",
    "prompt": "function will_it_fly(q: number[], w: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_72_will_it_fly.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool will_it_fly(std::vector<long> q, long w) {\n    if (std::accumulate(q.begin(), q.end(), 0) > w) {\n        return false;\n    }\n    int i=0, j=q.size()-1;\n    while (i<j) {\n        if (q[i] != q[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction will_it_fly(q: number[], w: number): boolean {\n"
  },
  {
    "name": "HumanEval_75_is_multiply_prime",
    "language": "ts",
    "prompt": "function is_multiply_prime(a: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_75_is_multiply_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_multiply_prime;\n  assert.deepEqual(candidate(5),false);\n  assert.deepEqual(candidate(30),true);\n  assert.deepEqual(candidate(8),true);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(125),true);\n  assert.deepEqual(candidate(105),true);\n  assert.deepEqual(candidate(126),false);\n  assert.deepEqual(candidate(729),false);\n  assert.deepEqual(candidate(891),false);\n  assert.deepEqual(candidate(1001),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_multiply_prime(long a) {\n    auto is_prime = [&](long n) {\n        for (long j = 2; j < n; j++) {\n            if (n % j == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    for (long i = 2; i <= 100; i++) {\n        if (!is_prime(i)) continue;\n        for (long j = 2; j <= 100; j++) {\n            if (!is_prime(j)) continue;\n            for (long k = 2; k <= 100; k++) {\n                if (!is_prime(k)) continue;\n                if (i * j * k == a) return true;\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction is_multiply_prime(a: number): boolean {\n"
  },
  {
    "name": "HumanEval_120_maximum",
    "language": "ts",
    "prompt": "function maximum(arr: number[], k: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_120_maximum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n    if (k == 0) {\n        return {};\n    }\n    std::sort(arr.begin(), arr.end());\n    std::vector<long> ans(arr.end() - k, arr.end());\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction maximum(arr: number[], k: number): number[] {\n"
  },
  {
    "name": "HumanEval_1_separate_paren_groups",
    "language": "ts",
    "prompt": "function separate_paren_groups(paren_string: string): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_1_separate_paren_groups.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\n    std::vector<std::string> result;\n    std::string current_string;\n    int current_depth = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n            current_depth++;\n            current_string.push_back(c);\n        } else if (c == ')') {\n            current_depth--;\n            current_string.push_back(c);\n            if (current_depth == 0) {\n                result.push_back(current_string);\n                current_string.clear();\n            }\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction separate_paren_groups(paren_string: string): string[] {\n"
  },
  {
    "name": "HumanEval_22_filter_integers",
    "language": "ts",
    "prompt": "function filter_integers(values: any[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_22_filter_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> res;\n    for (auto x : values) {\n        if (x.type() == typeid(int)) {\n            res.push_back(std::any_cast<int>(x));\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction filter_integers(values: any[]): number[] {\n"
  },
  {
    "name": "HumanEval_94_skjkasdkd",
    "language": "ts",
    "prompt": "function skjkasdkd(lst: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_94_skjkasdkd.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = skjkasdkd;\n  assert.deepEqual(candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);\n  assert.deepEqual(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);\n  assert.deepEqual(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);\n  assert.deepEqual(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);\n  assert.deepEqual(candidate([0, 81, 12, 3, 1, 21]),3);\n  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);\n  assert.deepEqual(candidate([8191]),19);\n  assert.deepEqual(candidate([8191, 123456, 127, 7]),19);\n  assert.deepEqual(candidate([127, 97, 8192]),10);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong skjkasdkd(std::vector<long> lst) {\n    auto isPrime = [](long n) -> bool {\n        for(long i=2;i<=sqrt(n);i++) {\n            if(n%i==0) return false;\n        }\n        return true;\n    };\n    long maxx = 0;\n    for(auto i:lst) {\n        if(i>maxx && isPrime(i)) maxx = i;\n    }\n    long result = 0;\n    std::string s = std::to_string(maxx);\n    for(auto c:s) result += c-'0';\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction skjkasdkd(lst: number[]): number {\n"
  },
  {
    "name": "HumanEval_74_total_match",
    "language": "ts",
    "prompt": "function total_match(lst1: string[], lst2: string[]): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_74_total_match.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n    int l1 = 0;\n    for (auto st : lst1) {\n        l1 += st.size();\n    }\n    int l2 = 0;\n    for (auto st : lst2) {\n        l2 += st.size();\n    }\n    if (l1 <= l2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n"
  },
  {
    "name": "HumanEval_41_car_race_collision",
    "language": "ts",
    "prompt": "function car_race_collision(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_41_car_race_collision.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = car_race_collision;\n  assert.deepEqual(candidate(2),4);\n  assert.deepEqual(candidate(3),9);\n  assert.deepEqual(candidate(4),16);\n  assert.deepEqual(candidate(8),64);\n  assert.deepEqual(candidate(10),100);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong car_race_collision(long n) {\n    return n*n;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction car_race_collision(n: number): number {\n"
  },
  {
    "name": "HumanEval_76_is_simple_power",
    "language": "ts",
    "prompt": "function is_simple_power(x: number, n: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_76_is_simple_power.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_simple_power(long x, long n) {\n    if (n == 1) {\n        return x == 1;\n    }\n    long power = 1;\n    while (power < x) {\n        power = power * n;\n    }\n    return power == x;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction is_simple_power(x: number, n: number): boolean {\n"
  },
  {
    "name": "HumanEval_93_encode",
    "language": "ts",
    "prompt": "function encode(message: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_93_encode.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string encode(std::string message) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::map<char, char> vowels_replace;\n    for (char i : vowels) {\n        vowels_replace[i] = i + 2;\n    }\n    std::transform(message.begin(), message.end(), message.begin(), [](char c) {\n        return std::isupper(c) ? std::tolower(c) : std::toupper(c);\n    });\n    std::string result = \"\";\n    for (char i : message) {\n        if (vowels_replace.count(i)) {\n            result += vowels_replace[i];\n        } else {\n            result += i;\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction encode(message: string): string {\n"
  },
  {
    "name": "HumanEval_42_incr_list",
    "language": "ts",
    "prompt": "function incr_list(l: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_42_incr_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> incr_list(std::vector<long> l) {\n  std::vector<long> res;\n  for (auto e : l) {\n    res.push_back(e + 1);\n  }\n  return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction incr_list(l: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_27_flip_case",
    "language": "ts",
    "prompt": "function flip_case(string: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_27_flip_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flip_case;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"Hello!\"),\"hELLO!\");\n  assert.deepEqual(candidate(\"These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string flip_case(std::string string) {\n    for (auto& c : string) {\n        if (isupper(c)) {\n            c = tolower(c);\n        } else {\n            c = toupper(c);\n        }\n    }\n    return string;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction flip_case(string: string): string {\n"
  },
  {
    "name": "HumanEval_64_vowels_count",
    "language": "ts",
    "prompt": "function vowels_count(s: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_64_vowels_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = vowels_count;\n  assert.deepEqual(candidate(\"abcde\"),2);\n  assert.deepEqual(candidate(\"Alone\"),3);\n  assert.deepEqual(candidate(\"key\"),2);\n  assert.deepEqual(candidate(\"bye\"),1);\n  assert.deepEqual(candidate(\"keY\"),2);\n  assert.deepEqual(candidate(\"bYe\"),1);\n  assert.deepEqual(candidate(\"ACEDY\"),3);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong vowels_count(std::string s) {\n    std::string vowels = \"aeiouAEIOU\";\n    long n_vowels = std::count_if(s.begin(), s.end(), [&](char c){return vowels.find(c) != std::string::npos;});\n    if (s.back() == 'y' || s.back() == 'Y') {\n        n_vowels += 1;\n    }\n    return n_vowels;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction vowels_count(s: string): number {\n"
  },
  {
    "name": "HumanEval_149_sorted_list_sum",
    "language": "ts",
    "prompt": "function sorted_list_sum(lst: string[]): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_149_sorted_list_sum.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\n    std::sort(lst.begin(), lst.end());\n    std::vector<std::string> new_lst;\n    for (auto i:lst) {\n        if (i.size()%2 == 0) {\n            new_lst.push_back(i);\n        }\n    }\n    std::sort(new_lst.begin(), new_lst.end(), [](std::string a, std::string b){return a.size() < b.size();});\n    return new_lst;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction sorted_list_sum(lst: string[]): string[] {\n"
  },
  {
    "name": "HumanEval_101_words_string",
    "language": "ts",
    "prompt": "function words_string(s: string): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_101_words_string.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = words_string;\n  assert.deepEqual(candidate(\"Hi, my name is John\"),[\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n  assert.deepEqual(candidate(\"One, two, three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"Hi, my name\"),[\"Hi\", \"my\", \"name\"]);\n  assert.deepEqual(candidate(\"One,, two, three, four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<std::string> words_string(std::string s) {\n    std::vector<std::string> result;\n    std::replace(s.begin(), s.end(), ',', ' ');\n    std::stringstream ss(s);\n    std::string word;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction words_string(s: string): string[] {\n"
  },
  {
    "name": "HumanEval_107_even_odd_palindrome",
    "language": "ts",
    "prompt": "function even_odd_palindrome(n: number): [number, number] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_107_even_odd_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_palindrome;\n  assert.deepEqual(candidate(123),[8, 13]);\n  assert.deepEqual(candidate(12),[4, 6]);\n  assert.deepEqual(candidate(3),[1, 2]);\n  assert.deepEqual(candidate(63),[6, 8]);\n  assert.deepEqual(candidate(25),[5, 6]);\n  assert.deepEqual(candidate(19),[4, 6]);\n  assert.deepEqual(candidate(9),[4, 5]);\n  assert.deepEqual(candidate(1),[0, 1]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::tuple<long, long> even_odd_palindrome(long n) {\n    auto is_palindrome = [](long n) -> bool {\n        std::string s = std::to_string(n);\n        return std::equal(s.begin(), s.end(), s.rbegin());\n    };\n    long even_palindrome_count = 0;\n    long odd_palindrome_count = 0;\n    for(long i=1; i<=n; i++) {\n        if(i%2 == 1 && is_palindrome(i)) {\n            odd_palindrome_count++;\n        } else if(i%2 == 0 && is_palindrome(i)) {\n            even_palindrome_count++;\n        }\n    }\n    return std::make_tuple(even_palindrome_count, odd_palindrome_count);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction even_odd_palindrome(n: number): [number, number] {\n"
  },
  {
    "name": "HumanEval_71_triangle_area",
    "language": "ts",
    "prompt": "function triangle_area(a: number, b: number, c: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_71_triangle_area.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(3, 4, 5),6.0);\n  assert.deepEqual(candidate(1, 2, 10),-1);\n  assert.deepEqual(candidate(4, 8, 5),8.18);\n  assert.deepEqual(candidate(2, 2, 2),1.73);\n  assert.deepEqual(candidate(1, 2, 3),-1);\n  assert.deepEqual(candidate(10, 5, 7),16.25);\n  assert.deepEqual(candidate(2, 6, 3),-1);\n  assert.deepEqual(candidate(1, 1, 1),0.43);\n  assert.deepEqual(candidate(2, 2, 10),-1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    float s = (a + b + c) / 2.0;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    area = round(area * 100) / 100;\n    return area;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction triangle_area(a: number, b: number, c: number): number {\n"
  },
  {
    "name": "HumanEval_95_check_dict_case",
    "language": "ts",
    "prompt": "function check_dict_case(dict: {[key: string]: string}): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_95_check_dict_case.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n    std::string state = \"start\";\n    for (auto const& [key, val] : dict) {\n        if (!std::all_of(key.begin(), key.end(), ::isalpha)) {\n            state = \"mixed\";\n            break;\n        }\n        if (state == \"start\") {\n            if (std::all_of(key.begin(), key.end(), ::isupper)) {\n                state = \"upper\";\n            } else if (std::all_of(key.begin(), key.end(), ::islower)) {\n                state = \"lower\";\n            } else {\n                break;\n            }\n        } else if ((state == \"upper\" && !std::all_of(key.begin(), key.end(), ::isupper)) || (state == \"lower\" && !std::all_of(key.begin(), key.end(), ::islower))) {\n            state = \"mixed\";\n            break;\n        }\n    }\n    return state == \"upper\" || state == \"lower\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction check_dict_case(dict: {[key: string]: string}): boolean {\n"
  },
  {
    "name": "HumanEval_130_tri",
    "language": "ts",
    "prompt": "function tri(n: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_130_tri.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> tri(long n) {\n    if (n == 0) {\n        return {1};\n    }\n    std::vector<long> my_tri = {1, 3};\n    for (long i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            my_tri.push_back(i / 2 + 1);\n        } else {\n            my_tri.push_back(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2);\n        }\n    }\n    return my_tri;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction tri(n: number): number[] {\n"
  },
  {
    "name": "HumanEval_47_median",
    "language": "ts",
    "prompt": "function median(l: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_47_median.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 1) {\n        return l[l.size() / 2];\n    } else {\n        return (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction median(l: number[]): number {\n"
  },
  {
    "name": "HumanEval_44_change_base",
    "language": "ts",
    "prompt": "function change_base(x: number, base: number): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_44_change_base.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string change_base(long x, long base) {\n    std::string ret;\n    while (x > 0) {\n        ret = std::to_string(x % base) + ret;\n        x /= base;\n    }\n    return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction change_base(x: number, base: number): string {\n"
  },
  {
    "name": "HumanEval_12_longest",
    "language": "ts",
    "prompt": "function longest(strings: string[]): string | undefined {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_12_longest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = longest;\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"x\");\n  assert.deepEqual(candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]),\"zzzz\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::optional<std::string> longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n        return std::nullopt;\n    }\n    auto it = std::max_element(strings.begin(), strings.end(), [](const std::string& a, const std::string& b) {\n        return a.size() < b.size();\n    });\n    return *it;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction longest(strings: string[]): string | undefined {\n"
  },
  {
    "name": "HumanEval_58_common",
    "language": "ts",
    "prompt": "function common(l1: number[], l2: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_58_common.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5, 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::set<long> ret;\n    for (auto e1 : l1) {\n        for (auto e2 : l2) {\n            if (e1 == e2) {\n                ret.insert(e1);\n            }\n        }\n    }\n    std::vector<long> v(ret.begin(), ret.end());\n    std::sort(v.begin(), v.end());\n    return v;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction common(l1: number[], l2: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_154_cycpattern_check",
    "language": "ts",
    "prompt": "function cycpattern_check(a: string, b: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_154_cycpattern_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cycpattern_check;\n  assert.deepEqual(candidate(\"xyzw\", \"xyw\"),false);\n  assert.deepEqual(candidate(\"yello\", \"ell\"),true);\n  assert.deepEqual(candidate(\"whattup\", \"ptut\"),false);\n  assert.deepEqual(candidate(\"efef\", \"fee\"),true);\n  assert.deepEqual(candidate(\"abab\", \"aabb\"),false);\n  assert.deepEqual(candidate(\"winemtt\", \"tinem\"),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool cycpattern_check(std::string a, std::string b) {\n    int l = b.length();\n    std::string pat = b + b;\n    for(int i = 0; i <= a.length() - l; i++) {\n        for(int j = 0; j <= l; j++) {\n            if(a.substr(i, l) == pat.substr(j, l)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction cycpattern_check(a: string, b: string): boolean {\n"
  },
  {
    "name": "HumanEval_88_sort_array",
    "language": "ts",
    "prompt": "function sort_array(array: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_88_sort_array.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<long> sort_array(std::vector<long> array) {\n    if (array.empty()) {\n        return std::vector<long>();\n    } else {\n        bool isReversed = (array[0] + array[array.size() - 1]) % 2 == 0;\n        std::sort(array.begin(), array.end(), [&](long a, long b) {\n            return isReversed ? a > b : a < b;\n        });\n        return array;\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction sort_array(array: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_111_histogram",
    "language": "ts",
    "prompt": "function histogram(test: string): {[key: string]: number} {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_111_histogram.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> dict1;\n    std::stringstream ss(test);\n    std::string word;\n    long t = 0;\n    while (ss >> word) {\n        dict1[word]++;\n        if (dict1[word] > t) {\n            t = dict1[word];\n        }\n    }\n    std::map<std::string,long> result;\n    for (auto i : dict1) {\n        if (i.second == t) {\n            result[i.first] = t;\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction histogram(test: string): {[key: string]: number} {\n"
  },
  {
    "name": "HumanEval_123_get_odd_collatz",
    "language": "ts",
    "prompt": "function get_odd_collatz(n: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_123_get_odd_collatz.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_odd_collatz;\n  assert.deepEqual(candidate(14),[1, 5, 7, 11, 13, 17]);\n  assert.deepEqual(candidate(5),[1, 5]);\n  assert.deepEqual(candidate(12),[1, 3, 5]);\n  assert.deepEqual(candidate(1),[1]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> get_odd_collatz(long n) {\n    std::vector<long> odd_collatz;\n    if (n%2==0) {\n        odd_collatz = {}; \n    } else {\n        odd_collatz = {n};\n    }\n    while (n > 1) {\n        if (n % 2 == 0) {\n            n = n/2;\n        } else {\n            n = n*3 + 1;\n        }\n        if (n%2 == 1) {\n            odd_collatz.push_back(n);\n        }\n    }\n    std::sort(odd_collatz.begin(), odd_collatz.end());\n    return odd_collatz;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction get_odd_collatz(n: number): number[] {\n"
  },
  {
    "name": "HumanEval_62_derivative",
    "language": "ts",
    "prompt": "function derivative(xs: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_62_derivative.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = derivative;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),[1, 4, 12, 20]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);\n  assert.deepEqual(candidate([3, 2, 1]),[2, 2]);\n  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);\n  assert.deepEqual(candidate([1]),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> derivative(std::vector<long> xs) {\n  std::vector<long> res;\n  for (int i = 1; i < xs.size(); ++i) {\n    res.push_back(i * xs[i]);\n  }\n  return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction derivative(xs: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_63_fibfib",
    "language": "ts",
    "prompt": "function fibfib(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_63_fibfib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong fibfib(long n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction fibfib(n: number): number {\n"
  },
  {
    "name": "HumanEval_2_truncate_number",
    "language": "ts",
    "prompt": "function truncate_number(number: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_2_truncate_number.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat truncate_number(float number) {\n    return number - floor(number);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction truncate_number(number: number): number {\n"
  },
  {
    "name": "HumanEval_35_max_element",
    "language": "ts",
    "prompt": "function max_element(l: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_35_max_element.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong max_element(std::vector<long> l) {\n    long m = l[0];\n    for (long e: l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction max_element(l: number[]): number {\n"
  },
  {
    "name": "HumanEval_99_closest_integer",
    "language": "ts",
    "prompt": "function closest_integer(value: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong closest_integer(std::string value) {\n    std::regex pattern(\"\\\\.0+$\");\n    value = std::regex_replace(value, pattern, \"\");\n    double num = std::stod(value);\n    if (value.back() == '5') {\n        if (num > 0) {\n            return std::ceil(num);\n        } else {\n            return std::floor(num);\n        }\n    } else {\n        return std::round(num);\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction closest_integer(value: string): number {\n"
  },
  {
    "name": "HumanEval_39_prime_fib",
    "language": "ts",
    "prompt": "function prime_fib(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_39_prime_fib.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong prime_fib(long n) {\n    auto is_prime = [](long p) {\n        if (p < 2) {\n            return false;\n        }\n        for (long k = 2; k < std::min((long)std::sqrt(p) + 1, p - 1); ++k) {\n            if (p % k == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    std::vector<long> f = {0, 1};\n    while (true) {\n        f.push_back(f.back() + f[f.size() - 2]);\n        if (is_prime(f.back())) {\n            n -= 1;\n        }\n        if (n == 0) {\n            return f.back();\n        }\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction prime_fib(n: number): number {\n"
  },
  {
    "name": "HumanEval_8_sum_product",
    "language": "ts",
    "prompt": "function sum_product(numbers: number[]): [number, number] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_8_sum_product.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum_value = 0;\n    long prod_value = 1;\n\n    for (auto n: numbers) {\n        sum_value += n;\n        prod_value *= n;\n    }\n    return std::make_tuple(sum_value, prod_value);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction sum_product(numbers: number[]): [number, number] {\n"
  },
  {
    "name": "HumanEval_117_select_words",
    "language": "ts",
    "prompt": "function select_words(s: string, n: number): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_117_select_words.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string> result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss >> word) {\n        long n_consonants = 0;\n        for (char c : word) {\n            if (std::string(\"aeiouAEIOU\").find(c) == std::string::npos) {\n                n_consonants++;\n            }\n        }\n        if (n_consonants == n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction select_words(s: string, n: number): string[] {\n"
  },
  {
    "name": "HumanEval_122_add_elements",
    "language": "ts",
    "prompt": "function add_elements(arr: number[], k: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_122_add_elements.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong add_elements(std::vector<long> arr, long k) {\n    long sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (std::to_string(arr[i]).size() <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction add_elements(arr: number[], k: number): number {\n"
  },
  {
    "name": "HumanEval_159_eat",
    "language": "ts",
    "prompt": "function eat(number: number, need: number, remaining: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_159_eat.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = eat;\n  assert.deepEqual(candidate(5, 6, 10),[11, 4]);\n  assert.deepEqual(candidate(4, 8, 9),[12, 1]);\n  assert.deepEqual(candidate(1, 10, 10),[11, 0]);\n  assert.deepEqual(candidate(2, 11, 5),[7, 0]);\n  assert.deepEqual(candidate(4, 5, 7),[9, 2]);\n  assert.deepEqual(candidate(4, 5, 1),[5, 0]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> eat(long number, long need, long remaining) {\n    if(need <= remaining){\n        return { number + need , remaining-need };\n    } else{\n        return { number + remaining , 0};\n    }\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction eat(number: number, need: number, remaining: number): number[] {\n"
  },
  {
    "name": "HumanEval_113_odd_count",
    "language": "ts",
    "prompt": "function odd_count(lst: string[]): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_113_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = odd_count;\n  assert.deepEqual(candidate([\"1234567\"]),[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]);\n  assert.deepEqual(candidate([\"3\", \"11111111\"]),[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]);\n  assert.deepEqual(candidate([\"271\", \"137\", \"314\"]),[\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n    std::vector<std::string> res;\n    for (auto arr : lst) {\n        int n = std::count_if(arr.begin(), arr.end(), [](char c){return c%2==1;});\n        res.push_back(\"the number of odd elements \" + std::to_string(n) + \"n the str\"+ std::to_string(n) +\"ng \"+ std::to_string(n) +\" of the \"+ std::to_string(n) +\"nput.\");\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction odd_count(lst: string[]): string[] {\n"
  },
  {
    "name": "HumanEval_90_next_smallest",
    "language": "ts",
    "prompt": "function next_smallest(lst: number[]): number | undefined {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_90_next_smallest.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_smallest;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),2);\n  assert.deepEqual(candidate([5, 1, 4, 3, 2]),2);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([1, 1, 1, 1, 0]),1);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([-35, 34, 12, -45]),-35);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::optional<long> next_smallest(std::vector<long> lst) {\n    std::sort(lst.begin(), lst.end());\n    lst.erase(std::unique(lst.begin(), lst.end()), lst.end());\n    return lst.size() < 2 ? std::nullopt : std::make_optional(lst[1]);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction next_smallest(lst: number[]): number | undefined {\n"
  },
  {
    "name": "HumanEval_87_get_row",
    "language": "ts",
    "prompt": "function get_row(lst: number[][], x: number): [number, number][] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_87_get_row.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n    std::vector<std::tuple<long, long>> coords;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                coords.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(coords.begin(), coords.end(), [](auto a, auto b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return coords;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction get_row(lst: number[][], x: number): [number, number][] {\n"
  },
  {
    "name": "HumanEval_29_filter_by_prefix",
    "language": "ts",
    "prompt": "function filter_by_prefix(strings: string[], prefix: string): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_29_filter_by_prefix.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (auto x: strings) {\n        if (x.find(prefix) == 0) {\n            res.push_back(x);\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction filter_by_prefix(strings: string[], prefix: string): string[] {\n"
  },
  {
    "name": "HumanEval_102_choose_num",
    "language": "ts",
    "prompt": "function choose_num(x: number, y: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_102_choose_num.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = choose_num;\n  assert.deepEqual(candidate(12, 15),14);\n  assert.deepEqual(candidate(13, 12),-1);\n  assert.deepEqual(candidate(33, 12354),12354);\n  assert.deepEqual(candidate(5234, 5233),-1);\n  assert.deepEqual(candidate(6, 29),28);\n  assert.deepEqual(candidate(27, 10),-1);\n  assert.deepEqual(candidate(7, 7),-1);\n  assert.deepEqual(candidate(546, 546),546);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong choose_num(long x, long y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if (x == y) {\n        return -1;\n    }\n    return y - 1;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction choose_num(x: number, y: number): number {\n"
  },
  {
    "name": "HumanEval_82_prime_length",
    "language": "ts",
    "prompt": "function prime_length(string: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_82_prime_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_length;\n  assert.deepEqual(candidate(\"Hello\"),true);\n  assert.deepEqual(candidate(\"abcdcba\"),true);\n  assert.deepEqual(candidate(\"kittens\"),true);\n  assert.deepEqual(candidate(\"orange\"),false);\n  assert.deepEqual(candidate(\"wow\"),true);\n  assert.deepEqual(candidate(\"world\"),true);\n  assert.deepEqual(candidate(\"MadaM\"),true);\n  assert.deepEqual(candidate(\"Wow\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"HI\"),true);\n  assert.deepEqual(candidate(\"go\"),true);\n  assert.deepEqual(candidate(\"gogo\"),false);\n  assert.deepEqual(candidate(\"aaaaaaaaaaaaaaa\"),false);\n  assert.deepEqual(candidate(\"Madam\"),true);\n  assert.deepEqual(candidate(\"M\"),false);\n  assert.deepEqual(candidate(\"0\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool prime_length(std::string string) {\n    int l = string.size();\n    if (l == 0 || l == 1) {\n        return false;\n    }\n    for (int i = 2; i < l; i++) {\n        if (l % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction prime_length(string: string): boolean {\n"
  },
  {
    "name": "HumanEval_60_sum_to_n",
    "language": "ts",
    "prompt": "function sum_to_n(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_60_sum_to_n.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_to_n;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(6),21);\n  assert.deepEqual(candidate(11),66);\n  assert.deepEqual(candidate(30),465);\n  assert.deepEqual(candidate(100),5050);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong sum_to_n(long n) {\n    return (n * (n + 1)) / 2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction sum_to_n(n: number): number {\n"
  },
  {
    "name": "HumanEval_9_rolling_max",
    "language": "ts",
    "prompt": "function rolling_max(numbers: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_9_rolling_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long> result;\n    long running_max = 0;\n    for (long n : numbers) {\n        running_max = std::max(running_max, n);\n        result.push_back(running_max);\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction rolling_max(numbers: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_143_words_in_sentence",
    "language": "ts",
    "prompt": "function words_in_sentence(sentence: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_143_words_in_sentence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = words_in_sentence;\n  assert.deepEqual(candidate(\"This is a test\"),\"is\");\n  assert.deepEqual(candidate(\"lets go for swimming\"),\"go for\");\n  assert.deepEqual(candidate(\"there is no place available here\"),\"there is no place\");\n  assert.deepEqual(candidate(\"Hi I am Hussein\"),\"Hi am Hussein\");\n  assert.deepEqual(candidate(\"go for it\"),\"go for it\");\n  assert.deepEqual(candidate(\"here\"),\"\");\n  assert.deepEqual(candidate(\"here is\"),\"is\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string words_in_sentence(std::string sentence) {\n    std::vector<std::string> new_lst;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        int flg = 0;\n        if(word.size() == 1) {\n            flg = 1;\n        }\n        for(int i = 2; i < word.size(); i++) {\n            if(word.size()%i == 0) {\n                flg = 1;\n            }\n        }\n        if(flg == 0 || word.size() == 2) {\n            new_lst.push_back(word);\n        }\n    }\n    std::string res = \"\";\n    for(int i = 0; i < new_lst.size(); i++) {\n        res += new_lst[i];\n        if(i != new_lst.size()-1) {\n            res += \" \";\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction words_in_sentence(sentence: string): string {\n"
  },
  {
    "name": "HumanEval_118_get_closest_vowel",
    "language": "ts",
    "prompt": "function get_closest_vowel(word: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_118_get_closest_vowel.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string get_closest_vowel(std::string word) {\n    if (word.size() < 3) {\n        return \"\";\n    }\n\n    std::set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'O', 'U', 'I'};\n    for (int i = word.size() - 2; i >= 1; i--) {\n        if (vowels.count(word[i])) {\n            if (!vowels.count(word[i+1]) && !vowels.count(word[i-1])) {\n                return std::string(1, word[i]);\n            }\n        }\n    }\n    return \"\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction get_closest_vowel(word: string): string {\n"
  },
  {
    "name": "HumanEval_152_compare",
    "language": "ts",
    "prompt": "function compare(game: number[], guess: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_152_compare.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1, 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n    std::vector<long> res;\n    for(int i=0;i<game.size();i++){\n        res.push_back(abs(game[i]-guess[i]));\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction compare(game: number[], guess: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_26_remove_duplicates",
    "language": "ts",
    "prompt": "function remove_duplicates(numbers: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_26_remove_duplicates.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n    std::map<long, long> c;\n    for (auto n : numbers) {\n        c[n]++;\n    }\n    std::vector<long> result;\n    for (auto n : numbers) {\n        if (c[n] <= 1) {\n            result.push_back(n);\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction remove_duplicates(numbers: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_54_same_chars",
    "language": "ts",
    "prompt": "function same_chars(s0: string, s1: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_54_same_chars.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = same_chars;\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),true);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabc\"),true);\n  assert.deepEqual(candidate(\"dddddddabc\", \"abcd\"),true);\n  assert.deepEqual(candidate(\"eabcd\", \"dddddddabc\"),false);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabcf\"),false);\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),false);\n  assert.deepEqual(candidate(\"aabb\", \"aaccc\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool same_chars(std::string s0, std::string s1) {\n    return std::set<char>(s0.begin(), s0.end()) == std::set<char>(s1.begin(), s1.end());\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction same_chars(s0: string, s1: string): boolean {\n"
  },
  {
    "name": "HumanEval_6_parse_nested_parens",
    "language": "ts",
    "prompt": "function parse_nested_parens(paren_string: string): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_6_parse_nested_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> parse_nested_parens(std::string paren_string) {\n    std::vector<long> res;\n    std::stringstream ss(paren_string);\n    std::string s;\n    while (ss >> s) {\n        long depth = 0, max_depth = 0;\n        for (char c : s) {\n            if (c == '(') {\n                depth++;\n                max_depth = std::max(depth, max_depth);\n            } else {\n                depth--;\n            }\n        }\n        res.push_back(max_depth);\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction parse_nested_parens(paren_string: string): number[] {\n"
  },
  {
    "name": "HumanEval_155_even_odd_count",
    "language": "ts",
    "prompt": "function even_odd_count(num: number): [number, number] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_155_even_odd_count.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0, 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2, 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3, 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2, 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::tuple<long, long> even_odd_count(long num) {\n    long even_count = 0;\n    long odd_count = 0;\n    for (auto i: std::to_string(abs(num))) {\n        if (int(i)%2==0) {\n            even_count +=1;\n        } else {\n            odd_count +=1;\n        }\n    }\n    return std::make_tuple(even_count, odd_count);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction even_odd_count(num: number): [number, number] {\n"
  },
  {
    "name": "HumanEval_67_fruit_distribution",
    "language": "ts",
    "prompt": "function fruit_distribution(s: string, n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_67_fruit_distribution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong fruit_distribution(std::string s, long n) {\n    std::vector<int> lis;\n    std::stringstream ss(s);\n    std::string word;\n    while(ss >> word) {\n        if(std::regex_match(word, std::regex(\"\\\\d+\"))) {\n            lis.push_back(std::stoi(word));\n        }\n    }\n    return n - std::accumulate(lis.begin(), lis.end(), 0);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction fruit_distribution(s: string, n: number): number {\n"
  },
  {
    "name": "HumanEval_11_string_xor",
    "language": "ts",
    "prompt": "function string_xor(a: string, b: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_11_string_xor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\", \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string string_xor(std::string a, std::string b) {\n    std::string ans;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) ans += '0';\n        else ans += '1';\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction string_xor(a: string, b: string): string {\n"
  },
  {
    "name": "HumanEval_23_strlen",
    "language": "ts",
    "prompt": "function strlen(string: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_23_strlen.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strlen;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"x\"),1);\n  assert.deepEqual(candidate(\"asdasnakj\"),9);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong string_length(std::string string) {\n    return string.size();\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction strlen(string: string): number {\n"
  },
  {
    "name": "HumanEval_15_string_sequence",
    "language": "ts",
    "prompt": "function string_sequence(n: number): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_15_string_sequence.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = string_sequence;\n  assert.deepEqual(candidate(0),\"0\");\n  assert.deepEqual(candidate(3),\"0 1 2 3\");\n  assert.deepEqual(candidate(10),\"0 1 2 3 4 5 6 7 8 9 10\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string string_sequence(long n) {\n    std::string result = \"\";\n    for (long i = 0; i <= n; i++) {\n        result += std::to_string(i);\n        if (i != n) {\n            result += \" \";\n        }\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction string_sequence(n: number): string {\n"
  },
  {
    "name": "HumanEval_141_file_name_check",
    "language": "ts",
    "prompt": "function file_name_check(file_name: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_141_file_name_check.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = file_name_check;\n  assert.deepEqual(candidate(\"example.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"1example.dll\"),\"No\");\n  assert.deepEqual(candidate(\"s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"MY16FILE3.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"No\");\n  assert.deepEqual(candidate(\"_Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"/this_is_valid.dll\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"this_is_valid.txtexe\"),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"),\"No\");\n  assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\");\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"_f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string file_name_check(std::string file_name) {\n    std::vector<std::string> suf = {\"txt\", \"exe\", \"dll\"};\n    std::vector<std::string> lst;\n    std::stringstream ss(file_name);\n    std::string item;\n    while (std::getline(ss, item, '.')) {\n        lst.push_back(item);\n    }\n    if (lst.size() != 2) {\n        return \"No\";\n    }\n    if (std::find(suf.begin(), suf.end(), lst[1]) == suf.end()) {\n        return \"No\";\n    }\n    if (lst[0].length() == 0) {\n        return \"No\";\n    }\n    if (!isalpha(lst[0][0])) {\n        return \"No\";\n    }\n    int t = std::count_if(lst[0].begin(), lst[0].end(), ::isdigit);\n    if (t > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction file_name_check(file_name: string): string {\n"
  },
  {
    "name": "HumanEval_135_can_arrange",
    "language": "ts",
    "prompt": "function can_arrange(arr: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_135_can_arrange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = can_arrange;\n  assert.deepEqual(candidate([1, 2, 4, 3, 5]),3);\n  assert.deepEqual(candidate([1, 2, 4, 5]),-1);\n  assert.deepEqual(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]),2);\n  assert.deepEqual(candidate([4, 8, 5, 7, 3]),4);\n  assert.deepEqual(candidate([]),-1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong can_arrange(std::vector<long> arr) {\n    long ind=-1;\n    long i=1;\n    while (i<arr.size()) {\n      if (arr[i]<arr[i-1]) {\n        ind=i;\n      }\n      i+=1;\n    }\n    return ind;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction can_arrange(arr: number[]): number {\n"
  },
  {
    "name": "HumanEval_85_add",
    "language": "ts",
    "prompt": "function add(lst: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_85_add.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong add(std::vector<long> lst) {\n  long sum = 0;\n  for (int i = 1; i < lst.size(); i += 2) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction add(lst: number[]): number {\n"
  },
  {
    "name": "HumanEval_5_intersperse",
    "language": "ts",
    "prompt": "function intersperse(numbers: number[], delimeter: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_5_intersperse.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = intersperse;\n  assert.deepEqual(candidate([], 7),[]);\n  assert.deepEqual(candidate([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);\n  assert.deepEqual(candidate([2, 2, 2], 2),[2, 2, 2, 2, 2]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\n    if (numbers.empty()) {\n        return {};\n    }\n\n    std::vector<long> result;\n\n    for (auto n = numbers.begin(); n != numbers.end() - 1; ++n) {\n        result.push_back(*n);\n        result.push_back(delimeter);\n    }\n\n    result.push_back(numbers.back());\n\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction intersperse(numbers: number[], delimeter: number): number[] {\n"
  },
  {
    "name": "HumanEval_119_match_parens",
    "language": "ts",
    "prompt": "function match_parens(lst: string[]): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_119_match_parens.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = match_parens;\n  assert.deepEqual(candidate([\"()(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \")\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(())\", \"())())\"]),\"No\");\n  assert.deepEqual(candidate([\")())\", \"(()()(\"]),\"Yes\");\n  assert.deepEqual(candidate([\"(())))\", \"(()())((\"]),\"Yes\");\n  assert.deepEqual(candidate([\"()\", \"())\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(\", \"()))()\"]),\"Yes\");\n  assert.deepEqual(candidate([\"((((\", \"((())\"]),\"No\");\n  assert.deepEqual(candidate([\")(()\", \"(()(\"]),\"No\");\n  assert.deepEqual(candidate([\")(\", \")(\"]),\"No\");\n  assert.deepEqual(candidate([\"(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \"(\"]),\"Yes\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string match_parens(std::vector<std::string> lst) {\n    auto check = [](std::string s) {\n        int val = 0;\n        for (auto i : s) {\n            if (i == '(') {\n                val = val + 1;\n            } else {\n                val = val - 1;\n            }\n            if (val < 0) {\n                return false;\n            }\n        }\n        return val == 0;\n    };\n    auto S1 = lst[0] + lst[1];\n    auto S2 = lst[1] + lst[0];\n    return check(S1) || check(S2) ? \"Yes\" : \"No\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction match_parens(lst: string[]): string {\n"
  },
  {
    "name": "HumanEval_7_filter_by_substring",
    "language": "ts",
    "prompt": "function filter_by_substring(strings: string[], substring: string): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_7_filter_by_substring.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\n  std::vector<std::string> result;\n  for (auto x : strings) {\n    if (x.find(substring) != std::string::npos) {\n      result.push_back(x);\n    }\n  }\n  return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction filter_by_substring(strings: string[], substring: string): string[] {\n"
  },
  {
    "name": "HumanEval_158_find_max",
    "language": "ts",
    "prompt": "function find_max(words: string[]): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_158_find_max.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string find_max(std::vector<std::string> words) {\n    std::sort(words.begin(), words.end(), [](std::string a, std::string b) {\n        return std::make_pair(-std::set<char>(a.begin(), a.end()).size(), a) < std::make_pair(-std::set<char>(b.begin(), b.end()).size(), b);\n    });\n    return words[0];\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction find_max(words: string[]): string {\n"
  },
  {
    "name": "HumanEval_163_generate_integers",
    "language": "ts",
    "prompt": "function generate_integers(a: number, b: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_163_generate_integers.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = generate_integers;\n  assert.deepEqual(candidate(2, 10),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(10, 2),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(132, 2),[2, 4, 6, 8]);\n  assert.deepEqual(candidate(17, 89),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> generate_integers(long a, long b) {\n    long lower = std::max(2l, std::min(a, b));\n    long upper = std::min(8l, std::max(a, b));\n    std::vector<long> res;\n    for (long i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction generate_integers(a: number, b: number): number[] {\n"
  },
  {
    "name": "HumanEval_110_exchange",
    "language": "ts",
    "prompt": "function exchange(lst1: number[], lst2: number[]): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_110_exchange.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = exchange;\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 4]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 3]),\"NO\");\n  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\");\n  assert.deepEqual(candidate([100, 200], [200, 200]),\"YES\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\n    int odd = 0;\n    int even = 0;\n    for (auto i : lst1) {\n        if (i%2 == 1) {\n            odd++;\n        }\n    }\n    for (auto i : lst2) {\n        if (i%2 == 0) {\n            even++;\n        }\n    }\n    if (even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction exchange(lst1: number[], lst2: number[]): string {\n"
  },
  {
    "name": "HumanEval_156_int_to_mini_roman",
    "language": "ts",
    "prompt": "function int_to_mini_roman(number: number): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_156_int_to_mini_roman.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string int_to_mini_roman(long number) {\n    std::vector<long> num = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    std::vector<std::string> sym = {\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"};\n    int i = 12;\n    std::string res = \"\";\n    while (number) {\n        long div = number / num[i];\n        number %= num[i];\n        while (div) {\n            res += sym[i];\n            div -= 1;\n        }\n        i -= 1;\n    }\n    std::transform(res.begin(), res.end(), res.begin(), ::tolower);\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction int_to_mini_roman(number: number): string {\n"
  },
  {
    "name": "HumanEval_138_is_equal_to_sum_even",
    "language": "ts",
    "prompt": "function is_equal_to_sum_even(n: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_138_is_equal_to_sum_even.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_equal_to_sum_even;\n  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(8),true);\n  assert.deepEqual(candidate(10),true);\n  assert.deepEqual(candidate(11),false);\n  assert.deepEqual(candidate(12),true);\n  assert.deepEqual(candidate(13),false);\n  assert.deepEqual(candidate(16),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_equal_to_sum_even(long n) {\n    return n%2 == 0 && n >= 8;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction is_equal_to_sum_even(n: number): boolean {\n"
  },
  {
    "name": "HumanEval_144_simplify",
    "language": "ts",
    "prompt": "function simplify(x: string, n: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_144_simplify.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = simplify;\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n  assert.deepEqual(candidate(\"1/6\", \"2/1\"),false);\n  assert.deepEqual(candidate(\"5/1\", \"3/1\"),true);\n  assert.deepEqual(candidate(\"7/10\", \"10/2\"),false);\n  assert.deepEqual(candidate(\"2/10\", \"50/10\"),true);\n  assert.deepEqual(candidate(\"7/2\", \"4/2\"),true);\n  assert.deepEqual(candidate(\"11/6\", \"6/1\"),true);\n  assert.deepEqual(candidate(\"2/3\", \"5/2\"),false);\n  assert.deepEqual(candidate(\"5/2\", \"3/5\"),false);\n  assert.deepEqual(candidate(\"2/4\", \"8/4\"),true);\n  assert.deepEqual(candidate(\"2/4\", \"4/2\"),true);\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n  assert.deepEqual(candidate(\"1/5\", \"1/5\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nbool simplify(std::string x, std::string n) {\n    std::stringstream ss1(x), ss2(n);\n    int a, b, c, d;\n    char slash;\n    ss1 >> a >> slash >> b;\n    ss2 >> c >> slash >> d;\n    int numerator = a * c;\n    int denom = b * d;\n    return numerator % denom == 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction simplify(x: string, n: string): boolean {\n"
  },
  {
    "name": "HumanEval_161_solve",
    "language": "ts",
    "prompt": "function solve(s: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_161_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nstd::string solve(std::string s) {\n    bool flg = false;\n    std::string new_str = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            new_str[i] = isupper(s[i]) ? tolower(s[i]) : toupper(s[i]);\n            flg = true;\n        }\n    }\n    if (!flg) {\n        std::reverse(new_str.begin(), new_str.end());\n    }\n    return new_str;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction solve(s: string): string {\n"
  },
  {
    "name": "HumanEval_157_right_angle_triangle",
    "language": "ts",
    "prompt": "function right_angle_triangle(a: number, b: number, c: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_157_right_angle_triangle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool right_angle_triangle(long a, long b, long c) {\n    return a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n"
  },
  {
    "name": "HumanEval_151_double_the_difference",
    "language": "ts",
    "prompt": "function double_the_difference(lst: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_151_double_the_difference.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong double_the_difference(std::vector<float> lst) {\n    long sum = 0;\n    for (auto i : lst) {\n        if (i > 0 && int(i)%2!=0 && i == int(i)) {\n            sum += pow(i, 2);\n        }\n    }\n    return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction double_the_difference(lst: number[]): number {\n"
  },
  {
    "name": "HumanEval_3_below_zero",
    "language": "ts",
    "prompt": "function below_zero(operations: number[]): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_3_below_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1, 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool below_zero(std::vector<long> operations) {\n    long balance = 0;\n    for (auto op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction below_zero(operations: number[]): boolean {\n"
  },
  {
    "name": "HumanEval_13_greatest_common_divisor",
    "language": "ts",
    "prompt": "function greatest_common_divisor(a: number, b: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_13_greatest_common_divisor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong greatest_common_divisor(long a, long b) {\n    while (b) {\n        long temp = a % b; a = b; b = temp;\n    }\n    return a;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction greatest_common_divisor(a: number, b: number): number {\n"
  },
  {
    "name": "HumanEval_106_f",
    "language": "ts",
    "prompt": "function f(n: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_106_f.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(5),[1, 2, 6, 24, 15]);\n  assert.deepEqual(candidate(7),[1, 2, 6, 24, 15, 720, 28]);\n  assert.deepEqual(candidate(1),[1]);\n  assert.deepEqual(candidate(3),[1, 2, 6]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> f(long n) {\n    std::vector<long> ret;\n    for(long i=1;i<=n;i++) {\n        if(i%2==0) {\n            long x=1;\n            for(long j=1;j<=i;j++) x*=j;\n            ret.push_back(x);\n        } else {\n            long x=0;\n            for(long j=1;j<=i;j++) x+=j;\n            ret.push_back(x);\n        }\n    }\n    return ret;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction f(n: number): number[] {\n"
  },
  {
    "name": "HumanEval_57_monotonic",
    "language": "ts",
    "prompt": "function monotonic(l: number[]): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_57_monotonic.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nbool monotonic(std::vector<long> l) {\n    return std::is_sorted(l.begin(), l.end()) || std::is_sorted(l.rbegin(), l.rend());\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction monotonic(l: number[]): boolean {\n"
  },
  {
    "name": "HumanEval_105_by_length",
    "language": "ts",
    "prompt": "function by_length(arr: number[]): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_105_by_length.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> by_length(std::vector<long> arr) {\n    std::map<long, std::string> dic = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"}\n    };\n    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    std::vector<std::string> new_arr;\n    for (auto var: arr) {\n        if (dic.count(var)) {\n            new_arr.push_back(dic[var]);\n        }\n    }\n    return new_arr;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction by_length(arr: number[]): string[] {\n"
  },
  {
    "name": "HumanEval_51_remove_vowels",
    "language": "ts",
    "prompt": "function remove_vowels(text: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_51_remove_vowels.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_vowels;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"abcdef\\nghijklm\"),\"bcdf\\nghjklm\");\n  assert.deepEqual(candidate(\"fedcba\"),\"fdcb\");\n  assert.deepEqual(candidate(\"eeeee\"),\"\");\n  assert.deepEqual(candidate(\"acBAA\"),\"cB\");\n  assert.deepEqual(candidate(\"EcBOO\"),\"cB\");\n  assert.deepEqual(candidate(\"ybcd\"),\"ybcd\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string remove_vowels(std::string text) {\n    std::string res;\n    for (char c : text) {\n        if (std::string(\"aeiouAEIOU\").find(c) == std::string::npos) {\n            res += c;\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction remove_vowels(text: string): string {\n"
  },
  {
    "name": "HumanEval_134_check_if_last_char_is_a_letter",
    "language": "ts",
    "prompt": "function check_if_last_char_is_a_letter(txt: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_134_check_if_last_char_is_a_letter.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_if_last_char_is_a_letter;\n  assert.deepEqual(candidate(\"apple\"),false);\n  assert.deepEqual(candidate(\"apple pi e\"),true);\n  assert.deepEqual(candidate(\"eeeee\"),false);\n  assert.deepEqual(candidate(\"A\"),true);\n  assert.deepEqual(candidate(\"Pumpkin pie \"),false);\n  assert.deepEqual(candidate(\"Pumpkin pie 1\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"eeeee e \"),false);\n  assert.deepEqual(candidate(\"apple pie\"),false);\n  assert.deepEqual(candidate(\"apple pi e \"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool check_if_last_char_is_a_letter(std::string txt) {\n    std::string check = txt.substr(txt.find_last_of(' ') + 1);\n    return (check.size() == 1 && std::isalpha(check[0]));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction check_if_last_char_is_a_letter(txt: string): boolean {\n"
  },
  {
    "name": "HumanEval_77_iscube",
    "language": "ts",
    "prompt": "function iscube(a: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_77_iscube.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool iscube(long a) {\n    a = abs(a);\n    return pow(round(pow(a, 1. / 3)), 3) == a;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction iscube(a: number): boolean {\n"
  },
  {
    "name": "HumanEval_112_reverse_delete",
    "language": "ts",
    "prompt": "function reverse_delete(s: string, c: string): [string, boolean] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_112_reverse_delete.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n    s.erase(std::remove_if(s.begin(), s.end(), [&c](char x) { return c.find(x) != std::string::npos; }), s.end());\n    return {s, s == std::string(s.rbegin(), s.rend())};\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction reverse_delete(s: string, c: string): [string, boolean] {\n"
  },
  {
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "ts",
    "prompt": "function mean_absolute_deviation(numbers: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = mean_absolute_deviation;\n  assert.deepEqual(candidate([1.0, 2.0]),0.5);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0]),1.0);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),1.2);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat mean_absolute_deviation(std::vector<float> numbers) {\n    float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n    float sum = 0;\n    for (auto x: numbers) {\n        sum += abs(x - mean);\n    }\n    return sum / numbers.size();\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction mean_absolute_deviation(numbers: number[]): number {\n"
  },
  {
    "name": "HumanEval_56_correct_bracketing",
    "language": "ts",
    "prompt": "function correct_bracketing(brackets: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_56_correct_bracketing.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool correct_bracketing(std::string brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction correct_bracketing(brackets: string): boolean {\n"
  },
  {
    "name": "HumanEval_21_rescale_to_unit",
    "language": "ts",
    "prompt": "function rescale_to_unit(numbers: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_21_rescale_to_unit.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    float min_number = *std::min_element(numbers.begin(), numbers.end());\n    float max_number = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float> result;\n    for (auto x : numbers) {\n        result.push_back((x - min_number) / (max_number - min_number));\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction rescale_to_unit(numbers: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_127_intersection",
    "language": "ts",
    "prompt": "function intersection(interval1: [number, number], interval2: [number, number]): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_127_intersection.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = intersection;\n  assert.deepEqual(candidate([1, 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1, 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\");\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11, 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2, -2], [-3, -2]),\"NO\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n    auto is_prime = [](long num) {\n        if (num == 1 || num == 0) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        for (long i = 2; i < num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    long l = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long r = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    long length = r - l;\n    if (length > 0 && is_prime(length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction intersection(interval1: [number, number], interval2: [number, number]): string {\n"
  },
  {
    "name": "HumanEval_78_hex_key",
    "language": "ts",
    "prompt": "function hex_key(num: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_78_hex_key.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong hex_key(std::string num) {\n    std::string primes = \"2357BD\";\n    int total = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (primes.find(num[i]) != std::string::npos) {\n            total++;\n        }\n    }\n    return total;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction hex_key(num: string): number {\n"
  },
  {
    "name": "HumanEval_70_strange_sort_list",
    "language": "ts",
    "prompt": "function strange_sort_list(lst: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_70_strange_sort_list.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long> res;\n    bool switch_ = true;\n    while (lst.size()) {\n        res.push_back(switch_ ? *std::min_element(lst.begin(), lst.end()) : *std::max_element(lst.begin(), lst.end()));\n        lst.erase(std::find(lst.begin(), lst.end(), res.back()));\n        switch_ = !switch_;\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction strange_sort_list(lst: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_91_is_bored",
    "language": "ts",
    "prompt": "function is_bored(S: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_91_is_bored.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_bored;\n  assert.deepEqual(candidate(\"Hello world\"),0);\n  assert.deepEqual(candidate(\"Is the sky blue?\"),0);\n  assert.deepEqual(candidate(\"I love It !\"),1);\n  assert.deepEqual(candidate(\"bIt\"),0);\n  assert.deepEqual(candidate(\"I feel good today. I will be productive. will kill It\"),2);\n  assert.deepEqual(candidate(\"You and I are going for a walk\"),0);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong is_bored(std::string S) {\n    std::regex r(\"[.?!]\\\\s*\");\n    std::vector<std::string> sentences(std::sregex_token_iterator(S.begin(), S.end(), r, -1), std::sregex_token_iterator());\n    long res = 0;\n    for (auto sentence : sentences) {\n        res += sentence.substr(0, 2) == \"I \";\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction is_bored(S: string): number {\n"
  },
  {
    "name": "HumanEval_14_all_prefixes",
    "language": "ts",
    "prompt": "function all_prefixes(string: string): string[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_14_all_prefixes.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string> result;\n    for(int i=0;i<string.length();i++) {\n        result.push_back(string.substr(0,i+1));\n    }\n    return result;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction all_prefixes(string: string): string[] {\n"
  },
  {
    "name": "HumanEval_18_how_many_times",
    "language": "ts",
    "prompt": "function how_many_times(string: string, substring: string): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_18_how_many_times.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong how_many_times(std::string string, std::string substring) {\n    long times = 0;\n    for (int i = 0; i < string.size() - substring.size() + 1; i++) {\n        if (string.substr(i, substring.size()) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction how_many_times(string: string, substring: string): number {\n"
  },
  {
    "name": "HumanEval_121_solution",
    "language": "ts",
    "prompt": "function solution(lst: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_121_solution.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong solution(std::vector<long> lst) {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0 && lst[i] % 2 == 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction solution(lst: number[]): number {\n"
  },
  {
    "name": "HumanEval_126_is_sorted",
    "language": "ts",
    "prompt": "function is_sorted(lst: number[]): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_126_is_sorted.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_sorted(std::vector<long> lst) {\n    std::map<long, long> count_digit;\n    for (auto i: lst) {\n        count_digit[i]++;\n    }\n    for (auto i: lst) {\n        if (count_digit[i] > 2) {\n            return false;\n        }\n    }\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i-1] > lst[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction is_sorted(lst: number[]): boolean {\n"
  },
  {
    "name": "HumanEval_69_search",
    "language": "ts",
    "prompt": "function search(lst: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_69_search.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);\n  assert.deepEqual(candidate([4, 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3, 3]),-1);\n  assert.deepEqual(candidate([8, 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);\n  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2, 8, 2]),2);\n  assert.deepEqual(candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n  assert.deepEqual(candidate([8, 8, 3, 6, 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n  assert.deepEqual(candidate([1, 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n  assert.deepEqual(candidate([1]),1);\n  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3, 10, 10, 9, 2]),-1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong search(std::vector<long> lst) {\n    std::vector<long> frq(*std::max_element(lst.begin(), lst.end()) + 1, 0);\n    for (auto i : lst) {\n        frq[i]++;\n    }\n    long ans = -1;\n    for (int i = 1; i < frq.size(); i++) {\n        if (frq[i] >= i) {\n            ans = i;\n        }\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction search(lst: number[]): number {\n"
  },
  {
    "name": "HumanEval_68_pluck",
    "language": "ts",
    "prompt": "function pluck(arr: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_68_pluck.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> pluck(std::vector<long> arr) {\n    if(arr.size() == 0) return {};\n    std::vector<long> evens;\n    for(auto x: arr) if(x%2 == 0) evens.push_back(x);\n    if(evens.size() == 0) return {};\n    long min_val = *std::min_element(evens.begin(), evens.end());\n    return {min_val, std::find(arr.begin(), arr.end(), min_val) - arr.begin()};\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction pluck(arr: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_43_pairs_sum_to_zero",
    "language": "ts",
    "prompt": "function pairs_sum_to_zero(l: number[]): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_43_pairs_sum_to_zero.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 31]),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool pairs_sum_to_zero(std::vector<long> l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction pairs_sum_to_zero(l: number[]): boolean {\n"
  },
  {
    "name": "HumanEval_83_starts_one_ends",
    "language": "ts",
    "prompt": "function starts_one_ends(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_83_starts_one_ends.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(2),18);\n  assert.deepEqual(candidate(3),180);\n  assert.deepEqual(candidate(4),1800);\n  assert.deepEqual(candidate(5),18000);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong starts_one_ends(long n) {\n    if (n == 1) return 1;\n    return 18 * pow(10, n - 2);\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction starts_one_ends(n: number): number {\n"
  },
  {
    "name": "HumanEval_30_get_positive",
    "language": "ts",
    "prompt": "function get_positive(l: number[]): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_30_get_positive.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto e : l) {\n        if(e > 0) {\n            res.push_back(e);\n        }\n    }\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction get_positive(l: number[]): number[] {\n"
  },
  {
    "name": "HumanEval_28_concatenate",
    "language": "ts",
    "prompt": "function concatenate(strings: string[]): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_28_concatenate.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = concatenate;\n  assert.deepEqual(candidate([]),\"\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"xyz\");\n  assert.deepEqual(candidate([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string concatenate(std::vector<std::string> strings) {\n    return std::accumulate(strings.begin(), strings.end(), std::string(\"\"));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction concatenate(strings: string[]): string {\n"
  },
  {
    "name": "HumanEval_132_is_nested",
    "language": "ts",
    "prompt": "function is_nested(string: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_132_is_nested.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_nested(std::string string) {\n    std::vector<int> opening_bracket_index;\n    std::vector<int> closing_bracket_index;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '[') {\n            opening_bracket_index.push_back(i);\n        } else {\n            closing_bracket_index.push_back(i);\n        }\n    }\n    std::reverse(closing_bracket_index.begin(), closing_bracket_index.end());\n    int cnt = 0;\n    int i = 0;\n    int l = closing_bracket_index.size();\n    for (int idx : opening_bracket_index) {\n        if (i < l && idx < closing_bracket_index[i]) {\n            cnt++;\n            i++;\n        }\n    }\n    return cnt >= 2;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction is_nested(string: string): boolean {\n"
  },
  {
    "name": "HumanEval_48_is_palindrome",
    "language": "ts",
    "prompt": "function is_palindrome(text: string): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_48_is_palindrome.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_palindrome(std::string text) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] != text[text.size() - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction is_palindrome(text: string): boolean {\n"
  },
  {
    "name": "HumanEval_108_count_nums",
    "language": "ts",
    "prompt": "function count_nums(arr: number[]): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_108_count_nums.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long n = arr[i];\n        long neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        std::vector<long> digits;\n        std::stringstream ss;\n        ss << n;\n        std::string str = ss.str();\n        for (int j = 0; j < str.size(); j++) {\n            digits.push_back(str[j] - '0');\n        }\n        digits[0] = digits[0] * neg;\n        long sum = 0;\n        for (int j = 0; j < digits.size(); j++) {\n            sum += digits[j];\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction count_nums(arr: number[]): number {\n"
  },
  {
    "name": "HumanEval_25_factorize",
    "language": "ts",
    "prompt": "function factorize(n: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_25_factorize.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> factorize(long n) {\n    std::vector<long> fact;\n    long i = 2;\n    while (i <= sqrt(n) + 1) {\n        if (n % i == 0) {\n            fact.push_back(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        fact.push_back(n);\n    }\n    return fact;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction factorize(n: number): number[] {\n"
  },
  {
    "name": "HumanEval_59_largest_prime_factor",
    "language": "ts",
    "prompt": "function largest_prime_factor(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_59_largest_prime_factor.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nlong largest_prime_factor(long n) {\n    auto is_prime=[](long k){\n        if(k<2) return false;\n        for(long i=2;i<k;i++) if(k%i==0) return false;\n        return true;\n    };\n    long largest=1;\n    for(long j=2;j<=n;j++) if(n%j==0 && is_prime(j)) largest=std::max(largest,j);\n    return largest;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction largest_prime_factor(n: number): number {\n"
  },
  {
    "name": "HumanEval_147_get_max_triples",
    "language": "ts",
    "prompt": "function get_max_triples(n: number): number {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_147_get_max_triples.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong get_max_triples(long n) {\n    std::vector<long> A;\n    for (long i = 1; i <= n; i++) {\n        A.push_back(i*i - i + 1);\n    }\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = i+1; j < n; j++) {\n            for (long k = j+1; k < n; k++) {\n                if ((A[i]+A[j]+A[k])%3 == 0) {\n                    ans++;\n                }\n            }\n        }\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction get_max_triples(n: number): number {\n"
  },
  {
    "name": "HumanEval_86_anti_shuffle",
    "language": "ts",
    "prompt": "function anti_shuffle(s: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_86_anti_shuffle.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string anti_shuffle(std::string s) {\n    std::stringstream ss(s);\n    std::string word, res;\n    while (ss >> word) {\n        std::sort(word.begin(), word.end());\n        res += word + \" \";\n    }\n    res.pop_back();\n    return res;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction anti_shuffle(s: string): string {\n"
  },
  {
    "name": "HumanEval_84_solve",
    "language": "ts",
    "prompt": "function solve(N: number): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_84_solve.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n  assert.deepEqual(candidate(150),\"110\");\n  assert.deepEqual(candidate(147),\"1100\");\n  assert.deepEqual(candidate(333),\"1001\");\n  assert.deepEqual(candidate(963),\"10010\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string solve(long N) {\n    std::string s = std::to_string(N);\n    long sum = 0;\n    for (int i = 0; i < s.size(); i++) {\n        sum += s[i] - '0';\n    }\n    std::bitset<64> b(sum);\n    return b.to_string().substr(b.to_string().find('1'));\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction solve(N: number): string {\n"
  },
  {
    "name": "HumanEval_129_minPath",
    "language": "ts",
    "prompt": "function minPath(grid: number[][], k: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_129_minPath.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minPath;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]);\n  assert.deepEqual(candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]);\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]);\n  assert.deepEqual(candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]);\n  assert.deepEqual(candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]);\n  assert.deepEqual(candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]);\n  assert.deepEqual(candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);\n  assert.deepEqual(candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]);\n  assert.deepEqual(candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]);\n  assert.deepEqual(candidate([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\n  assert.deepEqual(candidate([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n    long n = grid.size();\n    long val = n * n + 1;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                std::vector<long> temp;\n                if (i != 0) {\n                    temp.push_back(grid[i - 1][j]);\n                }\n\n                if (j != 0) {\n                    temp.push_back(grid[i][j - 1]);\n                }\n\n                if (i != n - 1) {\n                    temp.push_back(grid[i + 1][j]);\n                }\n\n                if (j != n - 1) {\n                    temp.push_back(grid[i][j + 1]);\n                }\n\n                val = *std::min_element(temp.begin(), temp.end());\n            }\n        }\n    }\n\n    std::vector<long> ans;\n    for (long i = 0; i < k; i++) {\n        if (i % 2 == 0) {\n            ans.push_back(1);\n        } else {\n            ans.push_back(val);\n        }\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction minPath(grid: number[][], k: number): number[] {\n"
  },
  {
    "name": "HumanEval_89_encrypt",
    "language": "ts",
    "prompt": "function encrypt(s: string): string {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_89_encrypt.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"a\"),\"e\");\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::string encrypt(std::string s) {\n    std::string d = \"abcdefghijklmnopqrstuvwxyz\";\n    std::string out = \"\";\n    for (char c : s) {\n        if (d.find(c) != std::string::npos) {\n            out += d[(d.find(c)+2*2) % 26];\n        } else {\n            out += c;\n        }\n    }\n    return out;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction encrypt(s: string): string {\n"
  },
  {
    "name": "HumanEval_100_make_a_pile",
    "language": "ts",
    "prompt": "function make_a_pile(n: number): number[] {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_100_make_a_pile.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = make_a_pile;\n  assert.deepEqual(candidate(3),[3, 5, 7]);\n  assert.deepEqual(candidate(4),[4, 6, 8, 10]);\n  assert.deepEqual(candidate(5),[5, 7, 9, 11, 13]);\n  assert.deepEqual(candidate(6),[6, 8, 10, 12, 14, 16]);\n  assert.deepEqual(candidate(8),[8, 10, 12, 14, 16, 18, 20, 22]);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> ans;\n    for(long i=0;i<n;i++) {\n        ans.push_back(n+2*i);\n    }\n    return ans;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction make_a_pile(n: number): number[] {\n"
  },
  {
    "name": "HumanEval_31_is_prime",
    "language": "ts",
    "prompt": "function is_prime(n: number): boolean {\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_31_is_prime.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n}\n\ntest();",
    "stop_tokens": [
      "\n}",
      "\n/*",
      "\n//",
      "\nclass"
    ],
    "translation_prompt": "You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this C++ program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in TypeScript.\n\n### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nbool is_prime(long n) {\n    if (n < 2) {\n        return false;\n    }\n    for (long k = 2; k < n; k++) {\n        if (n % k == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n### Explanation\n\nThis{{{TOFILL}}}\n\n### TypeScript version\n\nfunction is_prime(n: number): boolean {\n"
  }
]