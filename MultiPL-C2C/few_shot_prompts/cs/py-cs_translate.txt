You are a helpful and faithful compiler that transpiles Python code to C# code. Please translate the following Python code to C#?

### Python version

from typing import Tuple

def even_odd_palindrome(n: int) -> Tuple[int, int]:
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)

### C# version

using System;
using System.Numerics;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using System.Data;
class Problem {
    public static Tuple<long, long> EvenOddPalindrome(long n) {
        Func<long, bool> is_palindrome = (long x) => {
            return x.ToString() == new string(x.ToString().Reverse().ToArray());
        };

        long even_palindrome_count = 0;
        long odd_palindrome_count = 0;

        for (long i = 1; i <= n; i++) {
            if (i % 2 == 1 && is_palindrome(i)) {
                odd_palindrome_count += 1;
            } else if (i % 2 == 0 && is_palindrome(i)) {
                even_palindrome_count += 1;
            }
        }

        return Tuple.Create(even_palindrome_count, odd_palindrome_count);
    }
}

### Python version

from typing import List

def is_sorted(lst: List[int]) -> bool:
    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False

### C# version

using System;
using System.Numerics;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using System.Data;
class Problem {
    public static bool IsSorted(List<long> lst) {
        Dictionary<long, long> count_digit = new Dictionary<long, long>();
        foreach (long i in lst) {
            if (!count_digit.ContainsKey(i)) {
                count_digit[i] = 0;
            }
            count_digit[i]++;
        }
        if (lst.Any(i => count_digit[i] > 2)) {
            return false;
        }
        if (lst.Select((x, i) => i == 0 || lst[i - 1] <= x).All(x => x)) {
            return true;
        }
        else {
            return false;
        }
    }
}

### Python version

from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result

### C# version

using System;
using System.Numerics;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using System.Data;
class Problem {
    public static List<string> SeparateParenGroups(string paren_string) {
        var result = new List<string>();
        var current_string = new List<char>();
        var current_depth = 0;

        foreach (var c in paren_string) {
            if (c == '(') {
                current_depth += 1;
                current_string.Add(c);
            } else if (c == ')') {
                current_depth -= 1;
                current_string.Add(c);

                if (current_depth == 0) {
                    result.Add(new string(current_string.ToArray()));
                    current_string.Clear();
                }
            }
        }

        return result;
    }
}

### Python version

from typing import List

def sort_array(array: List[int]) -> List[int]:
    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)

### C# version

using System;
using System.Numerics;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using System.Data;
class Problem {
    public static List<long> SortArray(List<long> array) {
        return array.Count == 0 ? new List<long>() : array.OrderBy(x => (array[0] + array.Last()) % 2 == 0 ? -x : x).ToList();
    }
}

