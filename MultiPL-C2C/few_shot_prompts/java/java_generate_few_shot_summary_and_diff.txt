You are an expert programmer in Python and Java. You are given a pair of Python and Java programs, and you need to provide a summary of what the programs do and of how to translate from Python to Java. The goal is so that a reader can easily translate from Python to Java given this summary.

### Python version

def even_odd_palindrome(n: int) -> Tuple[int, int]:
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)

### Java version

import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    public static Pair<Long, Long> evenOddPalindrome(long n) {
        long evenPalindromeCount = 0;
        long oddPalindromeCount = 0;

        for (long i = 1; i <= n; i++) {
            if (i % 2 == 1 & & isPalindrome(i)) {
                oddPalindromeCount++;
            } else if (i % 2 == 0 & & isPalindrome(i)) {
                evenPalindromeCount++;
            }
        }
        return Pair.with(evenPalindromeCount, oddPalindromeCount);
    }

    private static boolean isPalindrome(long n) {
        return Long.toString(n).equals(new StringBuilder(Long.toString(n)).reverse().toString());
    }
}

### Summary

The program counts the number of even and odd palindromes in the range [1, n]. A number is a palindrome if it reads the same forwards and backwards. The Python program uses a nested function to check if a number is a palindrome. The Java program uses a separate function to check if a number is a palindrome. Both programs use a for loop to iterate over the range [1, n]. The Python program uses an if-elif statement to increment the even and odd palindrome counts. The Java program uses an if-else statement to increment the even and odd palindrome counts. The Python program returns a tuple of the even and odd palindrome counts. The Java program returns a Pair object of the even and odd palindrome counts. To translate from Python to Java, replace the tuple return type with a Pair return type, replace the tuple creation with a Pair creation, and replace the nested function with a separate function. Also, replace the Python string reversal syntax with a StringBuilder object and its reverse method in Java.

### Python version

from typing import List

def is_sorted(lst: List[int]) -> bool:
    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False

### Java version

import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    public static boolean isSorted(ArrayList<Long> lst) {
        HashMap<Long, Long> count_digit = new HashMap<Long, Long>();
        for (long i : lst) {
            if (count_digit.containsKey(i)) {
                count_digit.put(i, count_digit.get(i) + 1);
            } else {
                count_digit.put(i, 1L);
            }
        }
        for (long i : lst) {
            if (count_digit.get(i) > 2) {
                return false;
            }
        }
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i - 1) > lst.get(i)) {
                return false;
            }
        }
        return true;
    }
}

### Summary

The program checks if a list of integers is sorted and has at most two occurrences of each integer. The Python version uses a dictionary to count the occurrences of each integer, while the Java version uses a HashMap. The Python version uses the `all` function to check if the list is sorted, while the Java version uses a for loop. To translate from Python to Java, replace `List[int]` with `ArrayList<Long>`, `dict` with `HashMap<Long, Long>`, and `all(lst[i-1] <= lst[i] for i in range(1, len(lst)))` with a for loop that checks if each element is greater than or equal to the previous element.

### Python version

from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result

### Java version

import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    public static ArrayList<String> separateParenGroups(String paren_string) {
        ArrayList<String> result = new ArrayList<String>();
        ArrayList<Character> current_string = new ArrayList<Character>();
        int current_depth = 0;

        for (int i = 0; i < paren_string.length(); i++) {
            char c = paren_string.charAt(i);
            if (c == '(') {
                current_depth += 1;
                current_string.add(c);
            } else if (c == ')') {
                current_depth -= 1;
                current_string.add(c);

                if (current_depth == 0) {
                    StringBuilder sb = new StringBuilder(current_string.size());
                    for (Character ch : current_string) {
                        sb.append(ch);
                    }
                    result.add(sb.toString());
                    current_string.clear();
                }
            }
        }

        return result;
    }
}

### Summary

The programs both define a function `separate_paren_groups`/`separateParenGroups` that takes a string of parentheses and returns a list of strings, where each string is a group of parentheses that are properly matched. For example, the input string `"(())()()"` would return the list `["(())", "()()", ""]`.

The function works by iterating through the input string and keeping track of the current depth of parentheses. Whenever an opening parenthesis is encountered, the depth is incremented and the current character is added to a list. Whenever a closing parenthesis is encountered, the depth is decremented and the current character is added to the list. If the depth reaches 0, then the list is converted to a string and added to the result list.

The Python and Java versions differ in a few ways:
- The Python version uses `List[str]` as the return type, while the Java version uses `ArrayList<String>`.
- The Python version uses `elif` to combine the `)` case with the `(` case, while the Java version uses `else if`.
- The Python version uses `paren_string` as the parameter name, while the Java version uses `paren_string`.
- Java uses the charAt() method to access individual characters in a string, whereas Python allows indexing directly into the string.
- Java requires us to use StringBuilder to efficiently concatenate strings, whereas Python allows us to use the join() method on a list of strings.

To translate from Python to Java, you can follow these steps:
1. Change the function name from `separate_paren_groups` to `separateParenGroups`.
2. Change the return type from `List[str]` to `ArrayList<String>`.
3. Change the parameter name from `paren_string` to `parenString`.
4. Replace the `elif` statements with `else if`.
5. Use the `charAt()` method to access individual characters in the string.
6. Use `StringBuilder` to efficiently concatenate strings.

### Python version

from typing import List

def sum_squares(lst: List[float]) -> int:
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared

### Java version

import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    public static long sumSquares(ArrayList<Float> lst) {
        long squared = 0;
        for (float i : lst) {
            squared += (long)Math.ceil(i) * (long)Math.ceil(i);
        }
        return squared;
    }
}

### Summary

The Python function `sum_squares` takes a list of floats and returns the sum of the squares of the ceiling of each element in the list. The Java function `sumSquares` takes an ArrayList of floats and returns the sum of the squares of the ceiling of each element in the list.

To translate from Python to Java, the following changes need to be made:
- Change the function name from `sum_squares` to `sumSquares`.
- Change the input type from `List[float]` to `ArrayList<Float>`.
- Change the import statements to import the appropriate Java libraries.
- Change the for loop to use a for-each loop instead of a for-in loop.
- Change the math function to use `(long)Math.ceil(i) * (long)Math.ceil(i)` instead of `math.ceil(i)**2`.
- Change the return type from `int` to `long`


