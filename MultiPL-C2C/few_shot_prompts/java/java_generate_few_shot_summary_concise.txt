You are an expert programmer in Python and Java. You are given a pair of Python and Java programs that are semantically identical, and you need to provide a concise summary of what the programs do. The goal is so that a reader can easily translate from Python to Java with this summary.

### Python version

def even_odd_palindrome(n: int) -> Tuple[int, int]:
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)

### Java version

import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    public static Pair<Long, Long> evenOddPalindrome(long n) {
        long evenPalindromeCount = 0;
        long oddPalindromeCount = 0;

        for (long i = 1; i <= n; i++) {
            if (i % 2 == 1 & & isPalindrome(i)) {
                oddPalindromeCount++;
            } else if (i % 2 == 0 & & isPalindrome(i)) {
                evenPalindromeCount++;
            }
        }
        return Pair.with(evenPalindromeCount, oddPalindromeCount);
    }

    private static boolean isPalindrome(long n) {
        return Long.toString(n).equals(new StringBuilder(Long.toString(n)).reverse().toString());
    }
}

### Summary

The given Python and Java programs are identical and they both define a function called `even_odd_palindrome` and `evenOddPalindrome` respectively. The function takes an integer `n` as input and returns a tuple/pair of two integers. The function counts the number of even and odd palindromic numbers between 1 and `n` (inclusive) and returns the counts as a tuple/pair. A number is palindromic if it reads the same forwards and backwards. The function `is_palindrome`/`isPalindrome` is defined to check if a number is palindromic. The function iterates over the range of numbers from 1 to `n` and checks if each number is palindromic and even or odd. If the number is palindromic and even, it increments the even palindrome count. If the number is palindromic and odd, it increments the odd palindrome count. The function then returns the tuple/pair of even and odd palindrome counts.

### Python version

from typing import List

def is_sorted(lst: List[int]) -> bool:
    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False

### Java version

import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    public static boolean isSorted(ArrayList<Long> lst) {
        HashMap<Long, Long> count_digit = new HashMap<Long, Long>();
        for (long i : lst) {
            if (count_digit.containsKey(i)) {
                count_digit.put(i, count_digit.get(i) + 1);
            } else {
                count_digit.put(i, 1L);
            }
        }
        for (long i : lst) {
            if (count_digit.get(i) > 2) {
                return false;
            }
        }
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i - 1) > lst.get(i)) {
                return false;
            }
        }
        return true;
    }
}

### Summary

The program checks if a list of integers is sorted and has at most 2 duplicates. The Python version uses a dictionary to count the number of occurrences of each integer, while the Java version uses a HashMap. Both versions then check if any integer has more than 2 occurrences. Finally, both versions check if the list is sorted and return True if it is and False otherwise. The Python version uses a list comprehension to check if the list is sorted, while the Java version uses a for loop.

### Python version

from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result

### Java version

import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    public static ArrayList<String> separateParenGroups(String paren_string) {
        ArrayList<String> result = new ArrayList<String>();
        ArrayList<Character> current_string = new ArrayList<Character>();
        int current_depth = 0;

        for (int i = 0; i < paren_string.length(); i++) {
            char c = paren_string.charAt(i);
            if (c == '(') {
                current_depth += 1;
                current_string.add(c);
            } else if (c == ')') {
                current_depth -= 1;
                current_string.add(c);

                if (current_depth == 0) {
                    StringBuilder sb = new StringBuilder(current_string.size());
                    for (Character ch : current_string) {
                        sb.append(ch);
                    }
                    result.add(sb.toString());
                    current_string.clear();
                }
            }
        }

        return result;
    }
}

### Summary

The function `separate_paren_groups` takes a string of parentheses and returns a list of strings, each of which contains a balanced set of parentheses. The Java version is identical in functionality, but uses a different syntax and libraries.

Both functions iterate through the input string, keeping track of the current depth of parentheses. When a closing parenthesis is encountered that balances the current depth, the current string is added to the result list. The Java version uses an ArrayList to store the current string, while the Python version uses a list. The Java version also uses a StringBuilder to convert the ArrayList to a string. The Python version uses the `join` method of the string class to concatenate the list of characters into a string.

### Python version

from typing import List

def sum_squares(lst: List[float]) -> int:
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared

### Java version

import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    public static long sumSquares(ArrayList<Float> lst) {
        long squared = 0;
        for (float i : lst) {
            squared += (long)Math.ceil(i) * (long)Math.ceil(i);
        }
        return squared;
    }
}

### Summary

The Python and Java programs take in a list of floats and return the sum of the squares of the ceiling of each float in the list. The Java version uses the ArrayList class instead of the List class, and uses explicit casting to long for the squared variable and the math.ceil() function. The Python version uses the math library to import the ceil() function, and uses the List class.

