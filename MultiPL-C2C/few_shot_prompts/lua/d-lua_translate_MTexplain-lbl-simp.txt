You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this D program does line by line? If a line is too long or too complicated, simplify it and explain what individual parts of the line mean first before explaining the whole line. The goal with the explanation, is so that a reader can easily rewrite the program in Lua?

### D version

import std.range;
import std.typecons;
import std.algorithm;
import std.format;
import std.conv;
import std.math;
import std.array;
import std.string;
Tuple!(long, long) even_odd_palindrome(long n) 
{
    bool is_palindrome(long n)
    {
        return to!string(n) == to!string(n).dup.reverse;
    }

    long even_palindrome_count = 0;
    long odd_palindrome_count = 0;

    foreach (i; 1 .. n+1)
    {
        if (i%2 == 1 && is_palindrome(i))
        {
            odd_palindrome_count += 1;
        }
        else if (i%2 == 0 && is_palindrome(i))
        {
            even_palindrome_count += 1;
        }
    }
    return tuple(even_palindrome_count, odd_palindrome_count);
}

### Explanation

The code is an implementation of a function that takes an integer n and returns a tuple containing the count of even and odd palindromes between 1 and n (inclusive). A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward. The function is named even_odd_palindrome and returns a Tuple of two long integers.

bool is_palindrome(long n)
{
    return to!string(n) == to!string(n).dup.reverse;
}
The code defines a nested function `is_palindrome` that takes a single long integer argument n and returns a boolean value indicating whether n is a palindrome. Let's break it down step by step:
to!string(n)
The function first converts n to a string using the to!string function from the std.conv module.
to!string(n).dup.reverse
It then reverses the string by making a copy (because string in D is immutable). The `.dup` method creates a copy of the string, and the `.reverse` method reverses the copy.
return to!string(n) == to!string(n).dup.reverse;
It then compares the string to a reversed copy of itself using the == operator.
Hence, the nested function returns a boolean indicating whether the input long is a palindrome.

long even_palindrome_count = 0;
long odd_palindrome_count = 0;
The next two lines define two long integer variables, even_palindrome_count and odd_palindrome_count, and initialize them to zero.

foreach (i; 1 .. n+1)
The foreach loop iterates over the range 1 .. n+1.

if (i%2 == 1 && is_palindrome(i))
{
    odd_palindrome_count += 1;
}
else if (i%2 == 0 && is_palindrome(i))
{
    even_palindrome_count += 1;
}
Let's break in down step by step:
i%2 == 1
This modulo function checks if `i` is odd
is_palindrome(i)
The function then checks if `i` is a palindrome using the previously defined nested function `is_palindrome`.
if (i%2 == 1 && is_palindrome(i))
{
    odd_palindrome_count += 1;
}
Together, the if-statement checks whether i is odd and whether it is a palindrome, and increments odd_palindrome_count if conditions are met. Same logic is applied to `even_palindrome_count`.
Hence, For each value i in the range, the loop increments `odd_palindrome_count` and `even_palindrome_count` if `i` is odd/even and a palindrome.

return tuple(even_palindrome_count, odd_palindrome_count);
Finally, the function returns a tuple containing the counts of even and odd palindromes.

### Lua version

math = require('math')
local function even_odd_palindrome(n)
    local function is_palindrome(n)
        return tostring(n) == string.reverse(tostring(n))
    end

    local even_palindrome_count = 0
    local odd_palindrome_count = 0

    for i=1, n do
        if i%2 == 1 and is_palindrome(i) then
            odd_palindrome_count = odd_palindrome_count + 1
        elseif i%2 == 0 and is_palindrome(i) then
            even_palindrome_count = even_palindrome_count + 1
        end
    end
    return {even_palindrome_count, odd_palindrome_count}
end

### D version

import std.range;
import std.typecons;
import std.algorithm;
import std.format;
import std.conv;
import std.math;
import std.array;
import std.string;
bool is_sorted(long[] lst) 
{
    long[long] count_digit;
    foreach (i; lst)
        count_digit[i] = 0;
    foreach (i; lst)
        count_digit[i]++;
    if (any!(i => count_digit[i] > 2)(lst))
        return false;
    if (lst.isSorted)
        return true;
    else
        return false;
}

### Explanation

The code is an implementation of a function called `is_sorted` that takes an array of long integers and returns true if the array is sorted and false otherwise.

long[long] count_digit;
foreach (i; lst)
    count_digit[i] = 0;
foreach (i; lst)
    count_digit[i]++;
The function first creates a dictionary called `count_digit` that maps each integer in the array to the number of times it appears in the array. This is done using two `foreach` loops. Let's break it down step by step:
foreach (i; lst)
    count_digit[i] = 0;
The first loop initializes the dictionary with all keys set to 0.
foreach (i; lst)
    count_digit[i]++;
The second loop increments the value of the corresponding key in the dictionary for each integer in the array.
Hence, the function creates a dictionary that counts the occurrences of each integer.

if (any!(i => count_digit[i] > 2)(lst))
    return false;
The function then checks if any integer in the array appears more than twice. This is done using the `any` function from the `std.algorithm` module. If any integer appears more than twice, the function returns false.

if (lst.isSorted)
    return true;
else
    return false;
The function then checks if the array is sorted. This is done using the `isSorted` property of the array. If the array is sorted, the function returns true. Otherwise, it returns false.

### Lua version

math = require('math')
local function is_sorted(lst)
    local count_digit = {}
    for i=1, #lst do
        count_digit[lst[i]] = (count_digit[lst[i]] or 0) + 1
    end
    for i=1, #lst do
        if count_digit[lst[i]] > 2 then
            return false
        end
    end
    for i=2, #lst do
        if lst[i-1] > lst[i] then
            return false
        end
    end
    return true
end

### D version

import std.string;
import std.conv;
import std.array;
import std.typecons;
import std.algorithm;
import std.range;
import std.format;
import std.math;
string[] separate_paren_groups(string paren_string) 
{
    string[] result;
    string current_string;
    int current_depth = 0;

    foreach (c; paren_string)
    {
        if (c == '(')
        {
            current_depth += 1;
            current_string ~= c;
        }
        else if (c == ')')
        {
            current_depth -= 1;
            current_string ~= c;

            if (current_depth == 0)
            {
                result ~= current_string;
                current_string = "";
            }
        }
    }

    return result;
}

### Explanation

The code is an implementation of `separate_paren_groups` which takes a string containing parentheses and returns an array of strings where each string is a group of parentheses.

string[] result;
string current_string;
int current_depth = 0;
The function declares three variables: `result`, `current_string`, and `current_depth` which are used to keep track of the current group of parentheses, current string, and the current depth of the parentheses.

foreach (c; paren_string)
{
The function then iterates over each character `c` in the input string `paren_string`.

if (c == '(')
{
    current_depth += 1;
    current_string ~= c;
}
If `c` is an opening parenthesis, the current depth is incremented and `c` is appended to the current string.

else if (c == ')')
{
    current_depth -= 1;
    current_string ~= c;
If `c` is a closing parenthesis, the current depth is decremented and `c` is appended to the current string.

if (current_depth == 0)
{
    result ~= current_string;
    current_string = "";
}
If the current depth is zero (meaning that all opening parentheses have been matched with closing parentheses), the current string is added to the result array and the current string is reset to an empty string.

return result;
Finally, the function returns the result array.

### Lua version

math = require('math')
local function separate_paren_groups(paren_string)
    local result = {}
    local current_string = {}
    local current_depth = 0

    for i=1, #paren_string do
        local c = paren_string:sub(i, i)
        if c == '(' then
            current_depth = current_depth + 1
            table.insert(current_string, c)
        elseif c == ')' then
            current_depth = current_depth - 1
            table.insert(current_string, c)

            if current_depth == 0 then
                table.insert(result, table.concat(current_string))
                current_string = {}
            end
        end
    end

    return result
end

### D version

import std.string;
import std.conv;
import std.format;
import std.algorithm;
import std.typecons;
import std.range;
import std.math;
import std.array;
long[] sort_array(long[] array)
{
    return array.length == 0 ? [] : array.sort!((a, b) => (array[0] + array[$ - 1]) % 2 == 0? a>b : a<b)(numbers);
}

### Explanation

The code is an implementation of a function that sorts an array of long integers. The function takes an array of long integers as input and returns a sorted array of long integers.

return array.length == 0 ? [] : array.sort!((a, b) => (array[0] + array[$ - 1]) % 2 == 0? a>b : a<b)(numbers);
The return statement returns the sorted array. Let's break it down step by step:
array.length == 0 ? []
The function starts by checking if the input array is empty. If the input array is empty, the function returns an empty array.
array.sort!((a, b) => (array[0] + array[$ - 1]) % 2 == 0? a>b : a<b)(numbers)
If the input array is not empty, the function sorts the array using the sort function from the standard library. The sort function takes a comparison function as an argument. Let's break it down step by step:
(a, b) => (array[0] + array[$ - 1]) % 2 == 0? a>b : a<b
The comparison function is a lambda function that takes two long integers as input and returns a boolean value. Let's break it down step by step:
(array[0] + array[$ - 1]) % 2 == 0
This condition is checking whether the sum of the first and last elements of the input array is even or odd.
a>b
If the sum is even, the lambda function returns true if the first input value is greater than the second input value, and false otherwise.
a<b
If the sum is odd, the lambda function returns true if the first input value is less than the second input value, and false otherwise.
Hence, if the sum is even, the comparison function makes sure the first number is greater than the second number, and vice versa.
Hence, if the sum is even, sorting will be done in descending order, otherwise if the sum is odd, sorting will be done in ascending order.
Hence, the function returns an empty array if the input is empty. Otherwise, the function sorts the input array in descending order if the sum of the first and last element of the array is even, and ascending if the sum is odd.

### Lua version

math = require('math')
local function sort_array(array)
    if #array == 0 then
        return {}
    else
        if (array[1] + array[#array]) % 2 == 0 then
            table.sort(array, function(a, b) return a > b end)
        else
            table.sort(array)
        end
        return array
    end
end

