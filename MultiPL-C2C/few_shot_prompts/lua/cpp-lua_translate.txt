You are a helpful and faithful compiler that transpiles C++ code to Lua code. Please translate the following C++ code to Lua?

### C++ version

#include<assert.h>
#include<bits/stdc++.h>
#include<vector>
#include<sstream>
#include<regex>
#include<map>
#include<set>
std::tuple<long, long> even_odd_palindrome(long n) {
    auto is_palindrome = [](long n) -> bool {
        std::string s = std::to_string(n);
        return std::equal(s.begin(), s.end(), s.rbegin());
    };
    long even_palindrome_count = 0;
    long odd_palindrome_count = 0;
    for(long i=1; i<=n; i++) {
        if(i%2 == 1 && is_palindrome(i)) {
            odd_palindrome_count++;
        } else if(i%2 == 0 && is_palindrome(i)) {
            even_palindrome_count++;
        }
    }
    return std::make_tuple(even_palindrome_count, odd_palindrome_count);
}

### Lua version

math = require('math')
local function even_odd_palindrome(n)
    local function is_palindrome(n)
        return tostring(n) == string.reverse(tostring(n))
    end

    local even_palindrome_count = 0
    local odd_palindrome_count = 0

    for i=1, n do
        if i%2 == 1 and is_palindrome(i) then
            odd_palindrome_count = odd_palindrome_count + 1
        elseif i%2 == 0 and is_palindrome(i) then
            even_palindrome_count = even_palindrome_count + 1
        end
    end
    return {even_palindrome_count, odd_palindrome_count}
end

### C++ version

#include<assert.h>
#include<bits/stdc++.h>
#include<vector>
#include<sstream>
#include<regex>
#include<map>
#include<set>
bool is_sorted(std::vector<long> lst) {
    std::map<long, long> count_digit;
    for (auto i: lst) {
        count_digit[i]++;
    }
    for (auto i: lst) {
        if (count_digit[i] > 2) {
            return false;
        }
    }
    for (int i = 1; i < lst.size(); i++) {
        if (lst[i-1] > lst[i]) {
            return false;
        }
    }
    return true;
}

### Lua version

math = require('math')
local function is_sorted(lst)
    local count_digit = {}
    for i=1, #lst do
        count_digit[lst[i]] = (count_digit[lst[i]] or 0) + 1
    end
    for i=1, #lst do
        if count_digit[lst[i]] > 2 then
            return false
        end
    end
    for i=2, #lst do
        if lst[i-1] > lst[i] then
            return false
        end
    end
    return true
end

### C++ version

#include<assert.h>
#include<bits/stdc++.h>
#include<vector>
#include<sstream>
#include<regex>
#include<map>
#include<set>
std::vector<std::string> separate_paren_groups(std::string paren_string) {
    std::vector<std::string> result;
    std::string current_string;
    int current_depth = 0;
    for (char c : paren_string) {
        if (c == '(') {
            current_depth++;
            current_string.push_back(c);
        } else if (c == ')') {
            current_depth--;
            current_string.push_back(c);
            if (current_depth == 0) {
                result.push_back(current_string);
                current_string.clear();
            }
        }
    }
    return result;
}

### Lua version

math = require('math')
local function separate_paren_groups(paren_string)
    local result = {}
    local current_string = {}
    local current_depth = 0

    for i=1, #paren_string do
        local c = paren_string:sub(i, i)
        if c == '(' then
            current_depth = current_depth + 1
            table.insert(current_string, c)
        elseif c == ')' then
            current_depth = current_depth - 1
            table.insert(current_string, c)

            if current_depth == 0 then
                table.insert(result, table.concat(current_string))
                current_string = {}
            end
        end
    end

    return result
end

### C++ version

#include<assert.h>
#include<bits/stdc++.h>
#include<vector>
#include<sstream>
#include<regex>
#include<map>
#include<set>
#include<unordered_map>
#include<unordered_set>
std::vector<long> sort_array(std::vector<long> array) {
    if (array.empty()) {
        return std::vector<long>();
    } else {
        bool isReversed = (array[0] + array[array.size() - 1]) % 2 == 0;
        std::sort(array.begin(), array.end(), [&](long a, long b) {
            return isReversed ? a > b : a < b;
        });
        return array;
    }
}

### Lua version

math = require('math')
local function sort_array(array)
    if #array == 0 then
        return {}
    else
        if (array[1] + array[#array]) % 2 == 0 then
            table.sort(array, function(a, b) return a > b end)
        else
            table.sort(array)
        end
        return array
    end
end

