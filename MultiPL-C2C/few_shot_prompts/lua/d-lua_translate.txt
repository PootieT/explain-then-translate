You are a helpful and faithful compiler that transpiles D code to Lua code. Please translate the following D code to Lua?

### D version

import std.range;
import std.typecons;
import std.algorithm;
import std.format;
import std.conv;
import std.math;
import std.array;
import std.string;
Tuple!(long, long) even_odd_palindrome(long n) 
{
    bool is_palindrome(long n)
    {
        return to!string(n) == to!string(n).dup.reverse;
    }

    long even_palindrome_count = 0;
    long odd_palindrome_count = 0;

    foreach (i; 1 .. n+1)
    {
        if (i%2 == 1 && is_palindrome(i))
        {
            odd_palindrome_count += 1;
        }
        else if (i%2 == 0 && is_palindrome(i))
        {
            even_palindrome_count += 1;
        }
    }
    return tuple(even_palindrome_count, odd_palindrome_count);
}

### Lua version

math = require('math')
local function even_odd_palindrome(n)
    local function is_palindrome(n)
        return tostring(n) == string.reverse(tostring(n))
    end

    local even_palindrome_count = 0
    local odd_palindrome_count = 0

    for i=1, n do
        if i%2 == 1 and is_palindrome(i) then
            odd_palindrome_count = odd_palindrome_count + 1
        elseif i%2 == 0 and is_palindrome(i) then
            even_palindrome_count = even_palindrome_count + 1
        end
    end
    return {even_palindrome_count, odd_palindrome_count}
end

### D version

import std.range;
import std.typecons;
import std.algorithm;
import std.format;
import std.conv;
import std.math;
import std.array;
import std.string;
bool is_sorted(long[] lst) 
{
    long[long] count_digit;
    foreach (i; lst)
        count_digit[i] = 0;
    foreach (i; lst)
        count_digit[i]++;
    if (any!(i => count_digit[i] > 2)(lst))
        return false;
    if (lst.isSorted)
        return true;
    else
        return false;
}

### Lua version

math = require('math')
local function is_sorted(lst)
    local count_digit = {}
    for i=1, #lst do
        count_digit[lst[i]] = (count_digit[lst[i]] or 0) + 1
    end
    for i=1, #lst do
        if count_digit[lst[i]] > 2 then
            return false
        end
    end
    for i=2, #lst do
        if lst[i-1] > lst[i] then
            return false
        end
    end
    return true
end

### D version

import std.string;
import std.conv;
import std.array;
import std.typecons;
import std.algorithm;
import std.range;
import std.format;
import std.math;
string[] separate_paren_groups(string paren_string) 
{
    string[] result;
    string current_string;
    int current_depth = 0;

    foreach (c; paren_string)
    {
        if (c == '(')
        {
            current_depth += 1;
            current_string ~= c;
        }
        else if (c == ')')
        {
            current_depth -= 1;
            current_string ~= c;

            if (current_depth == 0)
            {
                result ~= current_string;
                current_string = "";
            }
        }
    }

    return result;
}

### Lua version

math = require('math')
local function separate_paren_groups(paren_string)
    local result = {}
    local current_string = {}
    local current_depth = 0

    for i=1, #paren_string do
        local c = paren_string:sub(i, i)
        if c == '(' then
            current_depth = current_depth + 1
            table.insert(current_string, c)
        elseif c == ')' then
            current_depth = current_depth - 1
            table.insert(current_string, c)

            if current_depth == 0 then
                table.insert(result, table.concat(current_string))
                current_string = {}
            end
        end
    end

    return result
end

### D version

import std.string;
import std.conv;
import std.format;
import std.algorithm;
import std.typecons;
import std.range;
import std.math;
import std.array;
long[] sort_array(long[] array)
{
    return array.length == 0 ? [] : array.sort!((a, b) => (array[0] + array[$ - 1]) % 2 == 0? a>b : a<b)(numbers);
}

### Lua version

math = require('math')
local function sort_array(array)
    if #array == 0 then
        return {}
    else
        if (array[1] + array[#array]) % 2 == 0 then
            table.sort(array, function(a, b) return a > b end)
        else
            table.sort(array)
        end
        return array
    end
end

