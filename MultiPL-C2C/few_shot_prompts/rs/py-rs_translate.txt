You are a helpful and faithful compiler that transpiles Python code to Rust code. Please translate the following Python code to Rust?

### Python version

from typing import Tuple

def even_odd_palindrome(n: int) -> Tuple[int, int]:
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)

### Rust version

fn even_odd_palindrome(n: isize) -> (isize, isize) {
    fn is_palindrome(n: isize) -> bool {
        n.to_string() == n.to_string().chars().rev().collect::<String>()
    }

    let mut even_palindrome_count = 0;
    let mut odd_palindrome_count = 0;

    for i in 1..=n {
        if i % 2 == 1 && is_palindrome(i) {
            odd_palindrome_count += 1;
        } else if i % 2 == 0 && is_palindrome(i) {
            even_palindrome_count += 1;
        }
    }

    (even_palindrome_count, odd_palindrome_count)
}

### Python version

from typing import List

def is_sorted(lst: List[int]) -> bool:
    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False

### Rust version

fn is_sorted(lst: Vec<isize>) -> bool {
    let mut count_digit = std::collections::HashMap::new();
    for i in lst.iter() {
        let count = count_digit.entry(i).or_insert(0);
        *count += 1;
    }
    if lst.iter().any(|&i| count_digit[&i] > 2) {
        return false;
    }
    if lst.windows(2).all(|w| w[0] <= w[1]) {
        return true;
    } else {
        return false;
    }
}

### Python version

from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result

### Rust version

fn separate_paren_groups(paren_string: String) -> Vec<String> {
    let mut result = vec![];
    let mut current_string = vec![];
    let mut current_depth = 0;

    for c in paren_string.chars() {
        if c == '(' {
            current_depth += 1;
            current_string.push(c);
        } else if c == ')' {
            current_depth -= 1;
            current_string.push(c);

            if current_depth == 0 {
                result.push(current_string.iter().collect());
                current_string.clear();
            }
        }
    }

    result
}

### Python version

from typing import List

def sort_array(array: List[int]) -> List[int]:
    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)

### Rust version

fn sort_array(array: Vec<isize>) -> Vec<isize> {
    if array.len() == 0 {
        return vec![];
    }
    let reverse = (array[0] + array[array.len() - 1]) % 2 == 0;
    let mut sorted_array = array.clone();
    sorted_array.sort_unstable();
    if reverse {
        sorted_array.reverse();
    }
    sorted_array
}


