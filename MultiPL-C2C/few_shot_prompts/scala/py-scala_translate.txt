You are a helpful and faithful compiler that transpiles Python code to Scala code. Please translate the following Python code to Scala?

### Python version

from typing import Tuple

def even_odd_palindrome(n: int) -> Tuple[int, int]:
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)

### Scala version

import scala.math._
import scala.collection.mutable._
object Problem {
    def evenOddPalindrome(n : Long) : Tuple2[Long, Long] = {
        def isPalindrome(n : Long) : Boolean = {
            n.toString == n.toString.reverse
        }
        var evenPalindromeCount = 0L
        var oddPalindromeCount = 0L
        for (i <- 1L to n) {
            if (i % 2 == 1 && isPalindrome(i)) {
                oddPalindromeCount += 1
            } else if (i % 2 == 0 && isPalindrome(i)) {
                evenPalindromeCount += 1
            }
        }
        (evenPalindromeCount, oddPalindromeCount)
    }
}

### Python version

from typing import List

def is_sorted(lst: List[int]) -> bool:
    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False

### Scala version

import scala.math._
import scala.collection.mutable._
object Problem {
    def isSorted(lst : List[Long]) : Boolean = {
        val countDigit = lst.groupBy(identity).mapValues(_.size)
        if(countDigit.values.exists(_ > 2)) {
            return false
        } else {
            lst match {
                case Nil | _ :: Nil => true
                case a :: b :: tail => a <= b && isSorted(b :: tail)
            }
        }
    }
}

### Python version

from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result

### Scala version

import scala.math._
import scala.collection.mutable._
object Problem {
    def separateParenGroups(paren_string : String) : List[String] = {
        var result = List[String]()
        var currentString = ListBuffer[Char]()
        var currentDepth = 0
        for (c <- paren_string) {
            if (c == '(') {
                currentDepth += 1
                currentString += c
            } else if (c == ')') {
                currentDepth -= 1
                currentString += c
                if (currentDepth == 0) {
                    result = result :+ currentString.mkString
                    currentString.clear()
                }
            }
        }
        result
    }
}

### Python version

from typing import List

def sort_array(array: List[int]) -> List[int]:
    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)

### Scala version

import scala.math._
import scala.collection.mutable._
object Problem {
    def sortArray(array : List[Long]) : List[Long] = {
        if (array.length == 0) {
            List()
        } else {
            val isEven = (array(0) + array(array.length - 1)) % 2 == 0
            array.sorted(if (isEven) Ordering.Long.reverse else Ordering.Long)
        }
    }
}
