You are a helpful and faithful compiler that transpiles Lua code to Racket code. Please translate the following Lua code to Racket?

### Lua version

math = require('math')
local function even_odd_palindrome(n)
    local function is_palindrome(n)
        return tostring(n) == string.reverse(tostring(n))
    end

    local even_palindrome_count = 0
    local odd_palindrome_count = 0

    for i=1, n do
        if i%2 == 1 and is_palindrome(i) then
            odd_palindrome_count = odd_palindrome_count + 1
        elseif i%2 == 0 and is_palindrome(i) then
            even_palindrome_count = even_palindrome_count + 1
        end
    end
    return {even_palindrome_count, odd_palindrome_count}
end

### Racket version

#lang racket

;;
(define (even_odd_palindrome n)
  (define (is_palindrome n)
    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))

  (define even_palindrome_count 0)
  (define odd_palindrome_count 0)
  (for ([i (in-range 1 (add1 n))])
    (cond [(and (odd? i) (is_palindrome i)) (set! odd_palindrome_count (add1 odd_palindrome_count))]
          [(and (even? i) (is_palindrome i)) (set! even_palindrome_count (add1 even_palindrome_count))]))
  (list even_palindrome_count odd_palindrome_count))

### Lua version

math = require('math')
local function is_sorted(lst)
    local count_digit = {}
    for i=1, #lst do
        count_digit[lst[i]] = (count_digit[lst[i]] or 0) + 1
    end
    for i=1, #lst do
        if count_digit[lst[i]] > 2 then
            return false
        end
    end
    for i=2, #lst do
        if lst[i-1] > lst[i] then
            return false
        end
    end
    return true
end

### Racket version

#lang racket

;;
(define (is_sorted lst)
  (define count-digit (make-hash))
  (for-each (lambda (i) (hash-update! count-digit i add1 0)) lst)
  (if (ormap (lambda (i) (> (hash-ref count-digit i 0) 2)) lst)
      #f
      (let loop ([i 1])
        (if (< i (length lst))
            (if (<= (list-ref lst (- i 1)) (list-ref lst i))
                (loop (+ i 1))
                #f)
            #t))))

### Lua version

math = require('math')
local function separate_paren_groups(paren_string)
    local result = {}
    local current_string = {}
    local current_depth = 0

    for i=1, #paren_string do
        local c = paren_string:sub(i, i)
        if c == '(' then
            current_depth = current_depth + 1
            table.insert(current_string, c)
        elseif c == ')' then
            current_depth = current_depth - 1
            table.insert(current_string, c)

            if current_depth == 0 then
                table.insert(result, table.concat(current_string))
                current_string = {}
            end
        end
    end

    return result
end

### Racket version

#lang racket

;; 
(define (separate_paren_groups paren_string)
  (define result '())
  (define current_string '())
  (define current_depth 0)

  (for ([c (string->list paren_string)])
    (cond [(char=? c #\() (set! current_depth (add1 current_depth))
           (set! current_string (append current_string (list c)))]
          [(char=? c #\)) (set! current_depth (sub1 current_depth))
           (set! current_string (append current_string (list c)))
           (cond [(= current_depth 0) (set! result (append result (list (list->string current_string))))
                  (set! current_string '())])]))
  result)

### Lua version

math = require('math')
local function sort_array(array)
    if #array == 0 then
        return {}
    else
        if (array[1] + array[#array]) % 2 == 0 then
            table.sort(array, function(a, b) return a > b end)
        else
            table.sort(array)
        end
        return array
    end
end

### Racket version

#lang racket

(define (sort_array array)
  (if (null? array)
      '()
      (sort array (if (even? (+ (first array) (last array))) > <))))

