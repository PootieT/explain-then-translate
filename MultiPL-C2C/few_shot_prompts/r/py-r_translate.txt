You are a helpful and faithful compiler that transpiles Python code to R code. Please translate the following Python code to R?

### Python version

from typing import Tuple

def even_odd_palindrome(n: int) -> Tuple[int, int]:
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)

### R version

library(sets)
library(stringi)
suppressPackageStartupMessages(library(R.utils))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(hash))
even_odd_palindrome <- function(n) {
  is_palindrome <- function(n) {
    return (stri_reverse(as.character(n)) == as.character(n))
  }
  even_palindrome_count <- 0
  odd_palindrome_count <- 0
  for (i in 1:n) {
    if (i %% 2 == 1 && is_palindrome(i)) {
      odd_palindrome_count <- odd_palindrome_count + 1
    } else if (i %% 2 == 0 && is_palindrome(i)) {
      even_palindrome_count <- even_palindrome_count + 1
    }
  }
  return (c(even_palindrome_count, odd_palindrome_count))
}

### Python version

from typing import List

def is_sorted(lst: List[int]) -> bool:
    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False

### R version

library(sets)
library(stringi)
suppressPackageStartupMessages(library(R.utils))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(hash))
is_sorted <- function(lst) {
  count_digit <- as.list(table(lst))
  if (any(count_digit > 2)) {
    return(FALSE)
  }
  if (all(diff(lst) >= 0)) {
    return(TRUE)
  } else {
    return(FALSE)
  }
}

### Python version

from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result

### R version

library(sets)
library(stringi)
suppressPackageStartupMessages(library(R.utils))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(hash))
separate_paren_groups <- function(paren_string) {
    result <- list()
    current_string <- c()
    current_depth <- 0

    for (c in strsplit(paren_string, "")[[1]]) {
        if (c == "(") {
            current_depth <- current_depth + 1
            current_string <- c(current_string, c)
        } else if (c == ")") {
            current_depth <- current_depth - 1
            current_string <- c(current_string, c)

            if (current_depth == 0) {
                result <- c(result, paste(current_string, collapse = ""))
                current_string <- c()
            }
        }
    }
    return(result)
}

### Python version

from typing import List

def sort_array(array: List[int]) -> List[int]:
    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)

### R version

library(sets)
library(stringi)
suppressPackageStartupMessages(library(R.utils))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(hash))
sort_array <- function(array) {
    if (length(array) == 0) {
        return (c())
    } else {
        return (sort(array, decreasing = (sum(c(array[1], array[length(array)])) %% 2 == 0)))
    }

}
