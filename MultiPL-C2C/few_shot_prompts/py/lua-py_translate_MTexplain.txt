You are an helpful AI assistant who understands all programming languages and can translate between them at ease. Can you explain what this Lua program does with a couple of sentences? The goal with the explanation, is so that a reader can easily rewrite the program in Python?

### Lua version

math = require('math')
local function even_odd_palindrome(n)
    local function is_palindrome(n)
        return tostring(n) == string.reverse(tostring(n))
    end

    local even_palindrome_count = 0
    local odd_palindrome_count = 0

    for i=1, n do
        if i%2 == 1 and is_palindrome(i) then
            odd_palindrome_count = odd_palindrome_count + 1
        elseif i%2 == 0 and is_palindrome(i) then
            even_palindrome_count = even_palindrome_count + 1
        end
    end
    return {even_palindrome_count, odd_palindrome_count}
end

### Explanation

This program defines a function `even_odd_palindrome` which takes a number `n` as input. The function then defines another function `is_palindrome` which checks if a number is a palindrome. The function then initializes two variables `even_palindrome_count` and `odd_palindrome_count` to zero. It then loops from 1 to `n` and checks if the current number is a palindrome and if it is even or odd. If the number is odd and a palindrome, it increments `odd_palindrome_count` by 1. If the number is even and a palindrome, it increments `even_palindrome_count` by 1. Finally, the function returns a table with the two counts.

### Python version

from typing import Tuple

def even_odd_palindrome(n: int) -> Tuple[int, int]:
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)

### Lua version

math = require('math')
local function is_sorted(lst)
    local count_digit = {}
    for i=1, #lst do
        count_digit[lst[i]] = (count_digit[lst[i]] or 0) + 1
    end
    for i=1, #lst do
        if count_digit[lst[i]] > 2 then
            return false
        end
    end
    for i=2, #lst do
        if lst[i-1] > lst[i] then
            return false
        end
    end
    return true
end

### Explanation

This program defines a function `is_sorted` that takes an array of numbers and returns `true` if the array is sorted in non-descending order and each number appears at most twice in the array. Otherwise, it returns `false`. The function first counts the number of occurrences of each digit in the array using a table `count_digit`. It then checks that each digit appears at most twice in the array and that the array is sorted in non-descending order. If either of these conditions is not met, the function returns `false`. Otherwise, it returns `true`.

### Python version

from typing import List

def is_sorted(lst: List[int]) -> bool:
    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False

### Lua version

math = require('math')
local function separate_paren_groups(paren_string)
    local result = {}
    local current_string = {}
    local current_depth = 0

    for i=1, #paren_string do
        local c = paren_string:sub(i, i)
        if c == '(' then
            current_depth = current_depth + 1
            table.insert(current_string, c)
        elseif c == ')' then
            current_depth = current_depth - 1
            table.insert(current_string, c)

            if current_depth == 0 then
                table.insert(result, table.concat(current_string))
                current_string = {}
            end
        end
    end

    return result
end

### Explanation

This Lua program defines a function called `separate_paren_groups` that takes a string of parentheses and returns a table of strings that represent groups of parentheses separated by the outermost parentheses. For example, if the input string is `"((a)(b))((c)(d))"`, the output table would be `{"((a)(b))", "((c)(d))"}`. The function works by iterating over each character in the input string and keeping track of the current depth of parentheses. Whenever a closing parenthesis is encountered that brings the depth back to zero, the current string is added to the result table and a new current string is started.

### Python version

from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result

### Lua version

math = require('math')
local function sort_array(array)
    if #array == 0 then
        return {}
    else
        if (array[1] + array[#array]) % 2 == 0 then
            table.sort(array, function(a, b) return a > b end)
        else
            table.sort(array)
        end
        return array
    end
end

### Explanation

This program defines a function called `sort_array` that takes an array as input. If the array is empty, it returns an empty array. If the sum of the first and last element of the array is even, it sorts the array in descending order. Otherwise, it sorts the array in ascending order. The sorted array is then returned.

### Python version

from typing import List

def sort_array(array: List[int]) -> List[int]:
    if len(array) == 0:
        return []
    else:
        if (array[0] + array[-1]) % 2 == 0:
            array = sorted(array, reverse=True)
        else:
            array = sorted(array)
        return array
