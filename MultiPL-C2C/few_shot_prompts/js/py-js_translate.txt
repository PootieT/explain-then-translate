You are a helpful and faithful compiler that transpiles Python code to JavaScript code. Please translate the following Python code to JavaScript?

### Python version

from typing import Tuple

def even_odd_palindrome(n: int) -> Tuple[int, int]:
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)

### JavaScript version

function even_odd_palindrome(n){
    function is_palindrome(n){
        return String(n) === String(n).split("").reverse().join("");
    }

    let even_palindrome_count = 0;
    let odd_palindrome_count = 0;

    for(let i=1; i<n+1; i++){
        if(i%2 === 1 && is_palindrome(i)){
            odd_palindrome_count += 1;
        } else if(i%2 === 0 && is_palindrome(i)){
            even_palindrome_count += 1;
        }
    }
    return [even_palindrome_count, odd_palindrome_count];
}

### Python version

from typing import List

def is_sorted(lst: List[int]) -> bool:
    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False

### JavaScript version

function is_sorted(lst){
  let count_digit = {};
  lst.forEach(i => count_digit[i] = 0);
  lst.forEach(i => count_digit[i]++);
  if (lst.some(i => count_digit[i] > 2)){
    return false;
  }
  if (lst.slice(1).every((x, i) => x >= lst[i])){
    return true;
  }
  else{
    return false;
  }
}

### Python version

from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result

### JavaScript version

function separate_paren_groups(paren_string){
  let result = [];
  let current_string = [];
  let current_depth = 0;
  
  for(let c of paren_string){
    if(c === '('){
      current_depth += 1;
      current_string.push(c);
    }else if(c === ')'){
      current_depth -= 1;
      current_string.push(c);
      
      if(current_depth === 0){
        result.push(current_string.join(''));
        current_string = [];
      }
    }
  }
  
  return result;
}

### Python version

from typing import List

def sort_array(array: List[int]) -> List[int]:
    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)

### JavaScript version

function sort_array(array){
  return array.length == 0 ? [] : array.sort((a,b) => (array[0]+array[array.length-1]) % 2 == 0 ? b-a : a-b);
}

