You are a helpful and faithful compiler that transpiles Python code to Go code. Please translate the following Python code to Go?

### Python version

from typing import Tuple

def even_odd_palindrome(n: int) -> Tuple[int, int]:
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)

### Go version

package even_odd_palindrome_test

import (
    "testing"
    "fmt"
)

func even_odd_palindrome(n int) []interface{} {
    is_palindrome := func(n int) bool {
        s := fmt.Sprintf("%d", n)
        for i := 0; i < len(s)/2; i++ {
            if s[i] != s[len(s)-1-i] {
                return false
            }
        }
        return true
    }

    even_palindrome_count := 0
    odd_palindrome_count := 0

    for i := 1; i <= n; i++ {
        if i%2 == 1 && is_palindrome(i) {
            odd_palindrome_count += 1
        } else if i%2 == 0 && is_palindrome(i) {
            even_palindrome_count += 1
        }
    }
    return []interface{}{even_palindrome_count, odd_palindrome_count}
}

### Python version

from typing import List

def is_sorted(lst: List[int]) -> bool:
    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False

### Go version

package is_sorted_test

import (
    "testing"
    "fmt"
)

func is_sorted(lst []int) bool {
    count_digit := make(map[int]int)
    for _, i := range lst {
        count_digit[i] += 1
    }
    for _, i := range lst {
        if count_digit[i] > 2 {
            return false
        }
    }
    for i := 1; i < len(lst); i++ {
        if lst[i-1] > lst[i] {
            return false
        }
    }
    return true
}

### Python version

from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result

### Go version

package separate_paren_groups_test

import (
    "testing"
    "fmt"
)

func separate_paren_groups(paren_string string) []string {
    result := make([]string, 0)
    currentString := make([]rune, 0)
    currentDepth := 0

    for _, c := range paren_string {
        if c == '(' {
            currentDepth += 1
            currentString = append(currentString, c)
        } else if c == ')' {
            currentDepth -= 1
            currentString = append(currentString, c)

            if currentDepth == 0 {
                result = append(result, string(currentString))
                currentString = make([]rune, 0)
            }
        }
    }

    return result
}

### Python version

from typing import List

def sort_array(array: List[int]) -> List[int]:
    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)

### Go version

package sort_array_test

import (
    "testing"
    "fmt"
    "sort"
)

func sort_array(array []int) []int {
	if len(array) == 0 {
		return []int{}
	}

	reverse := (array[0]+array[len(array)-1])%2 == 0
	sort.Ints(array)

	if reverse {
		for i, j := 0, len(array)-1; i < j; i, j = i+1, j-1 {
			array[i], array[j] = array[j], array[i]
		}
	}

	return array
}
