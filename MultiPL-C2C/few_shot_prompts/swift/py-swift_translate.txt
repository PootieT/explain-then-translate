You are a helpful and faithful compiler that transpiles Python code to Swift code. Please translate the following Python code to Swift?

### Python version

from typing import Tuple

def even_odd_palindrome(n: int) -> Tuple[int, int]:
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)

### Swift version

import Swift
import Foundation
func even_odd_palindrome(n: Int) -> (Int, Int) {
    func is_palindrome(n: Int) -> Bool {
        return String(n) == String(String(n).reversed())
    }

    var even_palindrome_count = 0
    var odd_palindrome_count = 0

    for i in 1...n {
        if i % 2 == 1 && is_palindrome(n: i) {
            odd_palindrome_count += 1
        } else if i % 2 == 0 && is_palindrome(n: i) {
            even_palindrome_count += 1
        }
    }

    return (even_palindrome_count, odd_palindrome_count)
}

### Python version

from typing import List

def is_sorted(lst: List[int]) -> bool:
    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False

### Swift version

import Swift
import Foundation
func is_sorted(lst: [Int]) -> Bool {
    var count_digit : [Int:Int] = [Int:Int]()
    for i in lst {
        count_digit[i, default: 0] += 1
    }
    if lst.contains(where: { count_digit[$0]! > 2 }) {
        return false
    }
    if (stride(from: 1, to: lst.count, by: 1)).allSatisfy({ lst[$0-1] <= lst[$0] }) {
        return true
    } else {
        return false
    }
}

### Python version

from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result

### Swift version

import Swift
import Foundation
func separate_paren_groups(paren_string: String) -> [String] {
    var result: [String] = []
    var currentString: [Character] = []
    var currentDepth = 0

    for c in paren_string {
        if c == "(" {
            currentDepth += 1
            currentString.append(c)
        } else if c == ")" {
            currentDepth -= 1
            currentString.append(c)

            if currentDepth == 0 {
                result.append(String(currentString))
                currentString.removeAll()
            }
        }
    }

    return result
}

### Python version

from typing import List

def sort_array(array: List[int]) -> List[int]:
    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)

### Swift version

import Swift
import Foundation
func sort_array(array: [Int]) -> [Int] {
    return array.isEmpty ? [] : array.sorted(by: { (array[0] + array[array.count-1]) % 2 == 0 ? $0 > $1 : $0 < $1 })
}

